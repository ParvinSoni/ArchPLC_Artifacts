#                                             
# *Copyright 2007, 2011 CCLS Columbia University (USA), LIFO University of Orl��ans (France), BRGM (France)
# *
# *Authors: Cyril Nortet, Xiangrong Kong, Ansaf Salleb-Aouissi, Christel Vrain, Daniel Cassard
# *
# *This file is part of QuantMiner.
# *
# *QuantMiner is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
# *
# *QuantMiner is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# *
# *You should have received a copy of the GNU General Public License along with QuantMiner.  If not, see <http://www.gnu.org/licenses/>.
# 


from src.solver import *
from src.tools import *





class PanelParamLoading(PanelBaseParam):


    #* Creates new form PanneauParamGenetique 
    def __init__(self, contexteResolution):
        self.__jButtonChargerFichier = None
        self.__jEditorPaneDescription = None
        self.__jScrollPaneDescription = None
        self.__jTextAreaNote = None
        self.__jTextFieldNomFichier = None

        super().__init__(contexteResolution)

        self.__initComponents()

        if self.m_contexteResolution is None:
            return

        parametresChargement = self.m_contexteResolution.m_parametresTechChargement

        # Initialisation du contenu des champs :
        if parametresChargement.m_sNomFichier is None:
            self.__jTextFieldNomFichier.setText("No file loaded")
            self.__jEditorPaneDescription.setText("")
        else:
            self.__jTextFieldNomFichier.setText(parametresChargement.m_sNomFichier)
            self.__jEditorPaneDescription.setText(ResolutionContext.EcrireDescriptionFichierReglesBinairesHTML(parametresChargement.m_sNomFichier))
            self.__jEditorPaneDescription.setCaretPosition(0)


    #    * This method is called from within the constructor to
    #     * initialize the form.
    #     * WARNING: Do NOT modify this code. The content of this method is
    #     * always regenerated by the Form Editor.
    #     
    # <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    def __initComponents(self):
        self.__jButtonChargerFichier = javax.swing.JButton()
        self.__jTextFieldNomFichier = javax.swing.JTextField()
        self.__jScrollPaneDescription = javax.swing.JScrollPane()
        self.__jEditorPaneDescription = javax.swing.JEditorPane()
        self.__jTextAreaNote = javax.swing.JTextArea()

        setLayout(None)

        setPreferredSize(java.awt.Dimension(600, 450))
        self.__jButtonChargerFichier.setText("Load a QuantMiner file...")
        self.__jButtonChargerFichier.addActionListener(ActionListenerAnonymousInnerClass(self))

        add(self.__jButtonChargerFichier)
        self.__jButtonChargerFichier.setBounds(10, 60, 220, 23)

        self.__jTextFieldNomFichier.setEditable(False)
        add(self.__jTextFieldNomFichier)
        self.__jTextFieldNomFichier.setBounds(240, 60, 400, 19)

        self.__jScrollPaneDescription.setBorder(javax.swing.BorderFactory.createTitledBorder(None, "Information of the rule file:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, java.awt.Font("Dialog", 3, 12)))
        self.__jEditorPaneDescription.setEditable(False)
        self.__jEditorPaneDescription.setContentType("text/html")
        self.__jScrollPaneDescription.setViewportView(self.__jEditorPaneDescription)

        add(self.__jScrollPaneDescription)
        self.__jScrollPaneDescription.setBounds(10, 100, 630, 340)

        self.__jTextAreaNote.setBackground(java.awt.Color(85, 204, 204))
        self.__jTextAreaNote.setEditable(False)
        self.__jTextAreaNote.setFont(java.awt.Font("Dialog", 3, 10))
        self.__jTextAreaNote.setForeground(java.awt.Color(255, 0, 0))
        self.__jTextAreaNote.setLineWrap(True)
        self.__jTextAreaNote.setText("Note: The rules loaded from a QuantMiner File are filtered according to selectio  done in previous steps. To see all of them, please select the whole set o attributes by putting them in both sides in the filtering table.")
        add(self.__jTextAreaNote)
        self.__jTextAreaNote.setBounds(10, 10, 630, 30)
 # </editor-fold>//GEN-END:initComponents

    class ActionListenerAnonymousInnerClass(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__jButtonChargerFichierActionPerformed(evt)

    def __jButtonChargerFichierActionPerformed(self, evt):
        sFichierChoisi = None

        description = []
        description.append("QuantMiner File")
        extention = []
        extention.append("qmr")

        sFichierChoisi = ToolsInterface.DialogOuvertureFichier(self, ENV.REPERTOIRE_REGLES_QMR, description, extention)

        if (sFichierChoisi is not None) and (m_contexteResolution is not None):
            self.m_contexteResolution.PreChargerFichierReglesBinaires(sFichierChoisi)
            self.__jTextFieldNomFichier.setText(sFichierChoisi)
            self.__jEditorPaneDescription.setText(ResolutionContext.EcrireDescriptionFichierReglesBinairesHTML(sFichierChoisi))
            self.__jEditorPaneDescription.setCaretPosition(0) #GEN-LAST:event_jButtonChargerFichierActionPerformed


    # Variables declaration - do not modify//GEN-BEGIN:variables
    # End of variables declaration//GEN-END:variables



    def EnregistrerParametres(self):

        return True

