#                                             
# *Copyright 2007, 2011 CCLS Columbia University (USA), LIFO University of Orl��ans (France), BRGM (France)
# *
# *Authors: Cyril Nortet, Xiangrong Kong, Ansaf Salleb-Aouissi, Christel Vrain, Daniel Cassard
# *
# *This file is part of QuantMiner.
# *
# *QuantMiner is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
# *
# *QuantMiner is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# *
# *You should have received a copy of the GNU General Public License along with QuantMiner.  If not, see <http://www.gnu.org/licenses/>.
# 

from apriori_solver.onefile import *
from tools import *
from geneticAlgorithm import *
from graphicalInterface.PanelBaseParam import *

class PanelGeneticParam(PanelBaseParam):


    #* Creates new form PanneauParamGenetique 
    def __init__(self, contexteResolution):
        '''
        self.__jButtonDefautCroisement = None
        self.__jButtonDefautGenerations = None
        self.__jButtonDefautMutation = None
        self.__jButtonDefautPopulation = None
        self.__jLabelNombreGens = None
        self.__jLabelTaillePopulation = None
        self.__jLabelTauxCroisement = None
        self.__jLabelTauxMutation = None
        self.__jTextNombreGens = None
        self.__jTextTaillePopulation = None
        self.__jTextTauxCroisement = None
        self.__jTextTauxMutation = None
        '''

        super().__init__(contexteResolution)

        iconeRetourDefaut = None

        self.__initComponents()

        '''

        # Ic�nes sur les boutons :
        iconeRetourDefaut = ImageIcon(ENV.REPERTOIRE_RESSOURCES + "retour_defaut.jpg")
        self.__jButtonDefautPopulation.setIcon(iconeRetourDefaut)
        self.__jButtonDefautGenerations.setIcon(iconeRetourDefaut)
        self.__jButtonDefautCroisement.setIcon(iconeRetourDefaut)
        self.__jButtonDefautMutation.setIcon(iconeRetourDefaut)
        '''

        if self.m_contexteResolution is None:
            return

        parametresTechAlgoGenetique = self.m_contexteResolution.m_parametresTechAlgoGenetique

        '''
        # Initialisation du contenu des champs :
        self.__jTextTaillePopulation.setText(String.valueOf(parametresTechAlgoGenetique.m_iTaillePopulation))
        self.__jTextNombreGens.setText(String.valueOf(parametresTechAlgoGenetique.m_iNombreGenerations))
        self.__jTextTauxCroisement.setText(ResolutionContext.EcrirePourcentage(parametresTechAlgoGenetique.m_fPourcentageCroisement, 3, False))
        self.__jTextTauxMutation.setText(ResolutionContext.EcrirePourcentage(parametresTechAlgoGenetique.m_fPourcentageMutation, 3, False))
        '''

    #    * This method is called from within the constructor to
    #     * initialize the form.
    #     * WARNING: Do NOT modify this code. The content of this method is
    #     * always regenerated by the Form Editor.
    #     
    def __initComponents(self):
        '''
        self.__jTextTaillePopulation = javax.swing.JTextField()
        self.__jLabelTaillePopulation = javax.swing.JLabel()
        self.__jLabelTauxCroisement = javax.swing.JLabel()
        self.__jLabelTauxMutation = javax.swing.JLabel()
        self.__jTextTauxCroisement = javax.swing.JTextField()
        self.__jTextTauxMutation = javax.swing.JTextField()
        self.__jLabelNombreGens = javax.swing.JLabel()
        self.__jTextNombreGens = javax.swing.JTextField()
        self.__jButtonDefautPopulation = javax.swing.JButton()
        self.__jButtonDefautGenerations = javax.swing.JButton()
        self.__jButtonDefautCroisement = javax.swing.JButton()
        self.__jButtonDefautMutation = javax.swing.JButton()
        
        setLayout(None)
        
        setPreferredSize(java.awt.Dimension(410, 150))
        self.__jTextTaillePopulation.setText("jTextField1")
        add(self.__jTextTaillePopulation)
        self.__jTextTaillePopulation.setBounds(330, 20, 60, 20)

        self.__jLabelTaillePopulation.setText("Population size :")
        add(self.__jLabelTaillePopulation)
        self.__jLabelTaillePopulation.setBounds(20, 20, 140, 16)

        self.__jLabelTauxCroisement.setText("Cross-over rate (%) :")
        add(self.__jLabelTauxCroisement)
        self.__jLabelTauxCroisement.setBounds(20, 80, 140, 16)

        self.__jLabelTauxMutation.setText("Mutation rate (%) :")
        add(self.__jLabelTauxMutation)
        self.__jLabelTauxMutation.setBounds(20, 110, 130, 16)

        self.__jTextTauxCroisement.setText("jTextField2")
        self.__jTextTauxCroisement.setInputVerifier(ToolsInterface.VerifieurTextFieldIntervalleFloat(0.0, 100.0))
        add(self.__jTextTauxCroisement)
        self.__jTextTauxCroisement.setBounds(330, 80, 60, 20)

        self.__jTextTauxMutation.setText("jTextField1")
        self.__jTextTauxMutation.setInputVerifier(ToolsInterface.VerifieurTextFieldIntervalleFloat(0.0, 100.0))
        add(self.__jTextTauxMutation)
        self.__jTextTauxMutation.setBounds(330, 110, 60, 20)

        self.__jLabelNombreGens.setText("Number of generations :")
        add(self.__jLabelNombreGens)
        self.__jLabelNombreGens.setBounds(20, 50, 250, 16)

        self.__jTextNombreGens.setText("jTextField1")
        add(self.__jTextNombreGens)
        self.__jTextNombreGens.setBounds(330, 50, 60, 20)

        self.__jButtonDefautPopulation.setBackground(java.awt.Color(255, 255, 255))
        self.__jButtonDefautPopulation.addActionListener(ActionListenerAnonymousInnerClass(self))

        add(self.__jButtonDefautPopulation)
        self.__jButtonDefautPopulation.setBounds(400, 20, 20, 20)

        self.__jButtonDefautGenerations.setBackground(java.awt.Color(255, 255, 255))
        self.__jButtonDefautGenerations.addActionListener(ActionListenerAnonymousInnerClass2(self))

        add(self.__jButtonDefautGenerations)
        self.__jButtonDefautGenerations.setBounds(400, 50, 20, 20)

        self.__jButtonDefautCroisement.setBackground(java.awt.Color(255, 255, 255))
        self.__jButtonDefautCroisement.addActionListener(ActionListenerAnonymousInnerClass3(self))

        add(self.__jButtonDefautCroisement)
        self.__jButtonDefautCroisement.setBounds(400, 80, 20, 20)

        self.__jButtonDefautMutation.setBackground(java.awt.Color(255, 255, 255))
        self.__jButtonDefautMutation.addActionListener(ActionListenerAnonymousInnerClass4(self))

        add(self.__jButtonDefautMutation)
        self.__jButtonDefautMutation.setBounds(400, 110, 20, 20)
        '''
        None
 #GEN-END:initComponents

    class ActionListenerAnonymousInnerClass():

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            # outerInstance.__jButtonDefautPopulationActionPerformed(evt)
            None

    class ActionListenerAnonymousInnerClass2():

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            # outerInstance.__jButtonDefautGenerationsActionPerformed(evt)
            None

    class ActionListenerAnonymousInnerClass3():

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            # outerInstance.__jButtonDefautCroisementActionPerformed(evt)
            None

    class ActionListenerAnonymousInnerClass4():

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            # outerInstance.__jButtonDefautMutationActionPerformed(evt)
            None

    def __jButtonDefautMutationActionPerformed(self, evt):
        # self.__jTextTauxMutation.setText(ResolutionContext.EcrirePourcentage(ParametersGeneticAlgo.DEFAUT_COEFMUT, 3, False)) #GEN-LAST:event_jButtonDefautMutationActionPerformed
        None
    def __jButtonDefautCroisementActionPerformed(self, evt):
        # self.__jTextTauxCroisement.setText(ResolutionContext.EcrirePourcentage(ParametersGeneticAlgo.DEFAUT_COEFFCROIS, 3, False)) #GEN-LAST:event_jButtonDefautCroisementActionPerformed
        None
    def __jButtonDefautGenerationsActionPerformed(self, evt):
        # self.__jTextNombreGens.setText(String.valueOf(ParametersGeneticAlgo.DEFAUT_NBGEN)) #GEN-LAST:event_jButtonDefautGenerationsActionPerformed
        None
    def __jButtonDefautPopulationActionPerformed(self, evt):
        # self.__jTextTaillePopulation.setText(String.valueOf(ParametersGeneticAlgo.DEFAUT_TAILLEPOP)) #GEN-LAST:event_jButtonDefautPopulationActionPerformed
        None

    # Variables declaration - do not modify//GEN-BEGIN:variables
    # End of variables declaration//GEN-END:variables



    def EnregistrerParametres(self):

        iTaillePopulation = 0
        fPourcentageCroisement = 0.0
        fPourcentageMutation = 0.0
        iNombreGenerations = 0

        parametresTechnique = self.m_contexteResolution.m_parametresTechAlgoGenetique
        if parametresTechnique is None:
            return True

        # M�morisation des param�tres :


        try:
            iTaillePopulation = int(self.__jTextTaillePopulation.getText())
            parametresTechnique.m_iTaillePopulation = iTaillePopulation
        except NumberFormatException as e:
            return False

        try:
            iNombreGenerations = int(self.__jTextNombreGens.getText())
            parametresTechnique.m_iNombreGenerations = iNombreGenerations
        except NumberFormatException as e:
            return False

        try:
            fPourcentageCroisement = float((float(self.__jTextTauxCroisement.getText()) / 100.0))
            parametresTechnique.m_fPourcentageCroisement = fPourcentageCroisement
        except NumberFormatException as e:
            return False

        try:
            fPourcentageMutation = float((float(self.__jTextTauxMutation.getText()) / 100.0))
            parametresTechnique.m_fPourcentageMutation = fPourcentageMutation
        except NumberFormatException as e:
            return False

        return True



