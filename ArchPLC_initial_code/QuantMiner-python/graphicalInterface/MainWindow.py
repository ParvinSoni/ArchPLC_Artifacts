#                                             
# *Copyright 2007, 2011 CCLS Columbia University (USA), LIFO University of Orl��ans (France), BRGM (France)
# *
# *Authors: Cyril Nortet, Xiangrong Kong, Ansaf Salleb-Aouissi, Christel Vrain, Daniel Cassard
# *
# *This file is part of QuantMiner.
# *
# *QuantMiner is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
# *
# *QuantMiner is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# *
# *You should have received a copy of the GNU General Public License along with QuantMiner.  If not, see <http://www.gnu.org/licenses/>.
# 
import sys
sys.path.append('C:\\Users\\Administrator\\Desktop\\qtm\\src\\')


from apriori import *
from database import *
from geneticAlgorithm import *
from solver import *
from tools import *



#*main window 
class MainWindow(javax.swing.JFrame):

    PANNEAU_AUCUN = 0
    PANNEAU_DEFAUT = 1
    PANNEAU_PRE_CHARGEMENT_BD = 2
    PANNEAU_PRE_EXTRACION = 3
    PANNEAU_CONFIG_TECHNIQUE = 4
    PANNEAU_RESULTATS = 6
    PANNEAU_TECH_GENERIQUE = 7




    def __init__(self):
        self.m_panneauCourant = None
        self.m_iPanneauCourant = 0
        self.m_contexteResolution = None
        self.__aProposMenuItem = None
        self.__chargeProfilMenuItem = None
        self.__fermeMenuItem = None
        self.__jMenuItemInfosRegles = None
        self.__jMenuItemParametrage = None
        self.__jMenuOutils = None
        self.__jMenuProfils = None
        self.__menuAide = None
        self.__menuFichier = None
        self.__menuPrincipal = None
        self.__ouvrirAideMenuItem = None
        self.__ouvrirMenuItem = None
        self.__panneauPrincipal = None
        self.__quitteMenuItem = None
        self.__sauveProfilMenuItem = None

        dimensionEcran = None
        iconeFenetre = None

        self.m_contexteResolution = None
        self.m_iPanneauCourant = PANNEAU_AUCUN

        self.__initComponents()


        icone = None
        icone = ImageIcon(ENV.REPERTOIRE_RESSOURCES+"incone_quantminer.jpg")

        iconeFenetre = icone.getImage()
        if iconeFenetre is not None:
            setIconImage(iconeFenetre)


        self.ActiverPanneau(PANNEAU_DEFAUT)
        pack()

        dimensionEcran = Toolkit.getDefaultToolkit().getScreenSize()
        setLocation(dimensionEcran.width/2 - getWidth()/2, dimensionEcran.height/2 - getHeight()/2)

        setExtendedState(java.awt.Frame.NORMAL)

    #    * This method is called from within the constructor to
    #     * initialize the form.
    #     * WARNING: Do NOT modify this code. The content of this method is
    #     * always regenerated by the Form Editor.
    #     
    # <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    def __initComponents(self):
        self.__panneauPrincipal = javax.swing.JPanel() #main panel
        self.__menuPrincipal = javax.swing.JMenuBar() #main menu bar
        self.__menuFichier = javax.swing.JMenu() #file menu
        self.__ouvrirMenuItem = javax.swing.JMenuItem() #open file
        self.__fermeMenuItem = javax.swing.JMenuItem() #close --> return back to main panel
        self.__quitteMenuItem = javax.swing.JMenuItem() #exit
        self.__jMenuProfils = javax.swing.JMenu() #profile menu
        self.__chargeProfilMenuItem = javax.swing.JMenuItem() #load profile
        self.__sauveProfilMenuItem = javax.swing.JMenuItem() #save the current profile
        self.__jMenuOutils = javax.swing.JMenu() #tool menu
        self.__jMenuItemInfosRegles = javax.swing.JMenuItem() #get info on a rule file
        self.__jMenuItemParametrage = javax.swing.JMenuItem() #Quant Miner parameter
        self.__menuAide = javax.swing.JMenu() #help menu
        self.__ouvrirAideMenuItem = javax.swing.JMenuItem() #help content
        self.__aProposMenuItem = javax.swing.JMenuItem() #about

        setTitle("QuantMiner")
        addWindowListener(WindowAdapterAnonymousInnerClass(self))

        self.__panneauPrincipal.setLayout(java.awt.BorderLayout())

        #main window size, resize
        self.__panneauPrincipal.setMinimumSize(java.awt.Dimension(840, 550))
        self.__panneauPrincipal.setPreferredSize(java.awt.Dimension(840, 550))
        self.__panneauPrincipal.addComponentListener(ComponentAdapterAnonymousInnerClass(self))

        getContentPane().add(self.__panneauPrincipal, java.awt.BorderLayout.CENTER)

        self.__menuFichier.setText("File")
        self.__menuFichier.addActionListener(ActionListenerAnonymousInnerClass(self))

        self.__ouvrirMenuItem.setText("Open File")
        self.__ouvrirMenuItem.addActionListener(ActionListenerAnonymousInnerClass2(self))
        self.__menuFichier.add(self.__ouvrirMenuItem)

        self.__fermeMenuItem.setText("Close")
        self.__fermeMenuItem.setEnabled(False)
        self.__fermeMenuItem.addActionListener(ActionListenerAnonymousInnerClass3(self))
        self.__menuFichier.add(self.__fermeMenuItem)

        self.__quitteMenuItem.setText("Exit")
        self.__quitteMenuItem.addActionListener(ActionListenerAnonymousInnerClass4(self))
        self.__menuFichier.add(self.__quitteMenuItem)
        self.__menuPrincipal.add(self.__menuFichier)

        self.__jMenuProfils.setText("Profiles")
        self.__jMenuProfils.addActionListener(ActionListenerAnonymousInnerClass5(self))

        self.__chargeProfilMenuItem.setLabel("Load a profile")
        self.__chargeProfilMenuItem.addActionListener(ActionListenerAnonymousInnerClass6(self))

        self.__jMenuProfils.add(self.__chargeProfilMenuItem)

        self.__sauveProfilMenuItem.setLabel("Save the current profile")
        self.__sauveProfilMenuItem.addActionListener(ActionListenerAnonymousInnerClass7(self))

        self.__jMenuProfils.add(self.__sauveProfilMenuItem)
        self.__menuPrincipal.add(self.__jMenuProfils)


        self.__jMenuOutils.setText("Tools")
        self.__jMenuItemInfosRegles.setLabel("Get information on a rules file")
        self.__jMenuItemInfosRegles.addActionListener(ActionListenerAnonymousInnerClass8(self))

        self.__jMenuOutils.add(self.__jMenuItemInfosRegles)

        self.__jMenuItemParametrage.setLabel("QuantMiner parameters")
        self.__jMenuItemParametrage.addActionListener(ActionListenerAnonymousInnerClass9(self))

        self.__jMenuOutils.add(self.__jMenuItemParametrage)
        self.__menuPrincipal.add(self.__jMenuOutils)

        self.__menuAide.setText("Help")
        self.__menuAide.addActionListener(ActionListenerAnonymousInnerClass10(self))

        self.__ouvrirAideMenuItem.setLabel("Help contents")
        self.__ouvrirAideMenuItem.addActionListener(ActionListenerAnonymousInnerClass11(self))

        self.__menuAide.add(self.__ouvrirAideMenuItem)

        self.__aProposMenuItem.setLabel("About QuantMiner")
        self.__aProposMenuItem.addActionListener(ActionListenerAnonymousInnerClass12(self))

        self.__menuAide.add(self.__aProposMenuItem)
        self.__menuPrincipal.add(self.__menuAide)
        setJMenuBar(self.__menuPrincipal)

        pack() #Causes this Window to be sized to fit the preferred size and layouts of its subcomponents. // </editor-fold>//GEN-END:initComponents

    class WindowAdapterAnonymousInnerClass(java.awt.event.WindowAdapter):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def windowClosing(self, evt):
            outerInstance.__exitForm(evt)

    class ComponentAdapterAnonymousInnerClass(java.awt.event.ComponentAdapter):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def componentResized(self, evt):
            outerInstance.__panneauPrincipalComponentResized(evt)

    class ActionListenerAnonymousInnerClass(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__menuFichierActionPerformed(evt)

    class ActionListenerAnonymousInnerClass2(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__ouvrirMenuItemActionPerformed(evt)

    class ActionListenerAnonymousInnerClass3(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__fermeMenuItemActionPerformed(evt)

    class ActionListenerAnonymousInnerClass4(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__quitteMenuItemActionPerformed(evt)

    class ActionListenerAnonymousInnerClass5(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__jMenuProfilsActionPerformed(evt)

    class ActionListenerAnonymousInnerClass6(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__chargeProfilMenuItemActionPerformed(evt)

    class ActionListenerAnonymousInnerClass7(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__sauveProfilMenuItemActionPerformed(evt)

    class ActionListenerAnonymousInnerClass8(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__jMenuItemInfosReglesActionPerformed(evt)

    class ActionListenerAnonymousInnerClass9(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__jMenuItemParametrageActionPerformed(evt)

    class ActionListenerAnonymousInnerClass10(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__menuAideActionPerformed(evt)

    class ActionListenerAnonymousInnerClass11(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__ouvrirAideMenuItemActionPerformed(evt)

    class ActionListenerAnonymousInnerClass12(java.awt.event.ActionListener):

        def __init__(self, outerInstance):
            self.__outerInstance = outerInstance

        def actionPerformed(self, evt):
            outerInstance.__aProposMenuItemActionPerformed(evt)

    def __menuAideActionPerformed(self, evt):
        # Add your handling code here:
        pass #GEN-LAST:event_menuAideActionPerformed

    def __jMenuProfilsActionPerformed(self, evt):
        # Add your handling code here:
        pass #GEN-LAST:event_jMenuProfilsActionPerformed


    #*Get information of a rule file
    def __jMenuItemInfosReglesActionPerformed(self, evt):
        dialogAnalyseFichierRegles = DialogAnalyzeRuleFile(self, True)
        dialogAnalyseFichierRegles.show() #GEN-LAST:event_jMenuItemInfosReglesActionPerformed


    #*QuantMiner parameters menu item
    def __jMenuItemParametrageActionPerformed(self, evt):
        dialogParametrage = DialogParameterSetting(self.m_contexteResolution, self, True)
        dialogParametrage.show() #GEN-LAST:event_jMenuItemParametrageActionPerformed


    #About
    def __aProposMenuItemActionPerformed(self, evt):
        dialogAPropos = DialogAbout(self, True)
        dialogAPropos.show() #GEN-LAST:event_aProposMenuItemActionPerformed


    #*Help menu item 
    def __ouvrirAideMenuItemActionPerformed(self, evt):
        dialogAide = DialogHelp(ENV.REPERTOIRE_AIDE+"index.htm", self, True)
        dialogAide.show() #GEN-LAST:event_ouvrirAideMenuItemActionPerformed


    def __chargeProfilMenuItemActionPerformed(self, evt):
        sFichierChoisi = None
        sInformationChargement = None

        description = []
        description.append("Profile File")
        extention = []
        extention.append("prf")

        sFichierChoisi = ToolsInterface.DialogOuvertureFichier(self, ENV.REPERTOIRE_PROFILS, description, extention)

        if sFichierChoisi is not None:
            sInformationChargement = self.m_contexteResolution.ChargerProfil(sFichierChoisi)

            if sInformationChargement is not None:
                JOptionPane.showMessageDialog(self, sInformationChargement, "Avertissement", JOptionPane.INFORMATION_MESSAGE)

            if self.m_iPanneauCourant != PANNEAU_AUCUN:
                self.ActiverPanneau(self.m_iPanneauCourant) #GEN-LAST:event_chargeProfilMenuItemActionPerformed


    #*Save profile
    def __sauveProfilMenuItemActionPerformed(self, evt):
        sFichierChoisi = None
        fenetreTypeProfil = None
        donnees = None

        # the save dialog has relevance to the current panel
        fenetreTypeProfil = DialogSaveProfile(self.m_iPanneauCourant, self, True)
        donnees = fenetreTypeProfil.LierStructureDonnees()
        fenetreTypeProfil.show()

        #user cancel to save a profile
        if donnees.m_iSelectionUtilisateur == DialogSaveProfile.SELECTION_UTILISATEUR_ANNULER:
            return

        #user save a profile-- get the path where user want to save his file
        sFichierChoisi = ToolsInterface.DialogSauvegardeFichier(self, ENV.REPERTOIRE_PROFILS, "Profile File", "prf")
        #save the file
        if sFichierChoisi is not None:
            if self.m_panneauCourant is not None:
                if self.m_panneauCourant.SychroniserDonneesInternesSelonAffichage():
                    self.m_contexteResolution.SauvegarderProfil(sFichierChoisi, donnees.m_iMasqueEnregistrement) #GEN-LAST:event_sauveProfilMenuItemActionPerformed


    #*Close menu item under File
    def __fermeMenuItemActionPerformed(self, evt):
        if self.m_panneauCourant is not None:
            if not self.m_panneauCourant.AnnulerPanneau():
                return

        self.m_contexteResolution = None
        self.ActiverPanneau(PANNEAU_DEFAUT) #GEN-LAST:event_fermeMenuItemActionPerformed


    #*main panel resize
    def __panneauPrincipalComponentResized(self, evt):
        if self.m_panneauCourant is not None:
            self.m_panneauCourant.ArrangerDisposition()
            self.m_panneauCourant.validate() #GEN-LAST:event_panneauPrincipalComponentResized


    #*Open File menu item clicked 
    def __ouvrirMenuItemActionPerformed(self, evt):
        sFichierChoisi = None #absolute path of the file
        gestionnaireBD = None

        description = []
        description.append("File DBase 4")
        description.append("File csv")
        extention = []
        extention.append("dbf")
        extention.append("csv")

        sFichierChoisi = ToolsInterface.DialogOuvertureFichier(self, ENV.CHEMIN_DERNIERE_BASE_OUVERTE, description, extention)

        if sFichierChoisi is not None:

            index = sFichierChoisi.rfind('.')
            if index < 0:
                return
            extension = sFichierChoisi[index + 1:len(sFichierChoisi)].toLowerCase()
            gestionnaireBD = DatabaseAdmin(sFichierChoisi, extension)
            setTitle("QuantMiner " + gestionnaireBD.m_sNomBaseDeDonnees)

            if gestionnaireBD.EstBaseDeDonneesValide():
                ENV.CHEMIN_DERNIERE_BASE_OUVERTE = sFichierChoisi

                if self.m_panneauCourant is not None:
                    if not self.m_panneauCourant.AnnulerPanneau():
                        return

                self.m_contexteResolution = ResolutionContext(self)
                self.m_contexteResolution.m_gestionnaireBD = gestionnaireBD
                #In step 1, at the beginning, all columns are selected, and we also get to know column type due to AnalyserTypesChampsBD()
                self.m_contexteResolution.m_gestionnaireBD.PrendreEnCompteToutesLesColonnes()

                # Display du panel de manipulation de la Base de Donn�es :
                self.ActiverPanneau(PANNEAU_PRE_CHARGEMENT_BD) #Activate panel
            else:
                JOptionPane.showMessageDialog(None, "An error occured while loading the database. QuantMiner supports only table in DBF or CSV format. Use Excel for example to generate such tables.", "Error", JOptionPane.ERROR_MESSAGE) #GEN-LAST:event_ouvrirMenuItemActionPerformed


    def __menuFichierActionPerformed(self, evt):
        # Add your handling code here:
        pass #GEN-LAST:event_menuFichierActionPerformed


    def __quitteMenuItemActionPerformed(self, evt):
        System.exit(0) #GEN-LAST:event_quitteMenuItemActionPerformed

    #* Exit the Application 
    def __exitForm(self, evt):
        System.exit(0) #GEN-LAST:event_exitForm



    # Variables declaration - do not modify//GEN-BEGIN:variables
    # End of variables declaration//GEN-END:variables




    #    *
    #     * Activate a specific panel
    #     * @param iPanneau panel ID
    #     
    def ActiverPanneau(self, iPanneau):

        # D�sactive le panneau courant s'il existe :
        if self.m_panneauCourant is not None:
            self.m_panneauCourant.setVisible(False)
            self.m_panneauCourant = None


        if iPanneau == PANNEAU_DEFAUT:
            self.m_panneauCourant = (DefaultPanel()) #Default panel

        elif iPanneau == PANNEAU_PRE_CHARGEMENT_BD: #step1
            self.m_panneauCourant = (PanelPreLoadDB(self.m_contexteResolution))

        elif iPanneau == PANNEAU_PRE_EXTRACION: #step2
            self.m_panneauCourant = (PanelPreExtraction(self.m_contexteResolution))

        elif iPanneau == PANNEAU_CONFIG_TECHNIQUE: #step 3 parameter configuration
            self.m_panneauCourant = (PanelTechnConfig(self.m_contexteResolution))

        elif iPanneau == PANNEAU_RESULTATS: #step 5
            if self.m_contexteResolution is None:
                print("m_contexteResolution is null")
            elif self.m_contexteResolution.m_listeRegles is None:
                print("m_contexteResolution.m_listeRegles is null")
            self.m_panneauCourant = (PanelResults(self.m_contexteResolution))


        elif iPanneau == PANNEAU_TECH_GENERIQUE: #step 4
            self.m_panneauCourant = (PanelGenetic(self.m_contexteResolution))

        else:
            iPanneau = PANNEAU_AUCUN
            self.m_panneauCourant = None


        self.__fermeMenuItem.setEnabled((iPanneau!=PANNEAU_DEFAUT) and (m_panneauCourant is not None))
        self.__jMenuProfils.setEnabled((m_panneauCourant is not None) and ((iPanneau==PANNEAU_PRE_CHARGEMENT_BD) or (iPanneau==PANNEAU_PRE_EXTRACION) or (iPanneau==PANNEAU_CONFIG_TECHNIQUE)))


        self.m_iPanneauCourant = iPanneau

        if self.m_panneauCourant is not None:
            self.__panneauPrincipal.add(self.m_panneauCourant, java.awt.BorderLayout.CENTER)
            self.__panneauPrincipal.validate()
            self.m_panneauCourant.ArrangerDisposition()


