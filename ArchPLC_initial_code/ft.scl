TYPE typ_Workpiece:
   STRUCT
      s_id : String;
      s_type : String;
      s_state : String;
   END_STRUCT;
END_TYPE

TYPE typ_History:
   STRUCT
      ldt_ts : LDT;
      i_code : Int;
   END_STRUCT;

END_TYPE

TYPE typ_Config_Brightness_Sensor:
   STRUCT
      ldt_ts : LDT;
      x_on : Bool;
      i_fps : Int;
   END_STRUCT;

END_TYPE

TYPE typ_Camera_Picture:
   STRUCT
      ldt_ts : LDT;
      s_data : String;
   END_STRUCT;
END_TYPE

TYPE typ_Pos_Pan_Tilt_Unit_Enc:
   STRUCT
      ldt_ts : LDT;
      r_pan : Real;
      r_tilt : Real;
   END_STRUCT;

END_TYPE

TYPE typ_Alert_Message:

   STRUCT
      ldt_ts : LDT;
      s_id : String;
      s_data : String;
      i_code : Int;
   END_STRUCT;

END_TYPE

TYPE typ_State_Client:

   STRUCT
      ldt_ts : LDT;
      s_station : String;
      i_code : Int;
      s_description : String;
      x_active : Bool;
      s_target : String;
   END_STRUCT;

END_TYPE

TYPE typ_Stock_Item:

   STRUCT
      ldt_ts : LDT;
      StockItem : ARRAY[1..3, 1..3] OF typ_Workpiece;
      s_location : String;
   END_STRUCT;

END_TYPE

TYPE typ_Order_Workpiece_Buttons_State:

   STRUCT
      ldt_ts : LDT;
      s_state : String;
      s_type : String;
   END_STRUCT;

END_TYPE

TYPE typ_NFC_Module_State:

   STRUCT
      ldt_ts : LDT;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
   END_STRUCT;

END_TYPE

TYPE typ_Broadcast:

   STRUCT
      ldt_ts : LDT;
      di_hardwareId : DInt;
      di_hardwareModel : DInt;
      s_softwareName : String;
      di_softwareVersion : DInt;
      s_message : String;
   END_STRUCT;

END_TYPE

TYPE typ_Order_Workpiece_Buttons:

   STRUCT
      ldt_ts : LDT;
      s_type : String;
   END_STRUCT;

END_TYPE

TYPE typ_Action_Buttons_NFC_Module:

   STRUCT
      ldt_ts : LDT;
      s_cmd : String;
   END_STRUCT;

END_TYPE

TYPE typ_Pos_Pan_Tilt_Unit_Mov:

   STRUCT
      ldt_ts : LDT;
      s_cmd : String;
      i_degree : Int;
   END_STRUCT;

END_TYPE

TYPE typ_Config_Enviorment_Sensor:

   STRUCT
      ldt_ts : LDT;
      di_period : DInt;
   END_STRUCT;

END_TYPE

TYPE typ_Config_Camera_Picture:

   STRUCT
      ldt_ts : LDT;
      di_period : DInt;
   END_STRUCT;

END_TYPE

TYPE typ_Axis_Data:

   STRUCT
      di_Pos_Soft_Switch : DInt := 0;
      di_Neg_Soft_Switch : DInt := 0;
      di_Ref_Pos : DInt := 0;
      di_Loop_Value : DInt := 0;
      di_Pos_Window : DInt := 15;
   END_STRUCT;

END_TYPE

TYPE typ_SPS_Action_Buttons_NFC_Module:

   STRUCT
      ldt_ts : LDT;
      s_cmd : String;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
   END_STRUCT;

END_TYPE

TYPE typ_SPS_NFC_Module_State:

   STRUCT
      ldt_ts : LDT;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
   END_STRUCT;

END_TYPE

TYPE typ_Brightness_Sensor:

   STRUCT
      ldt_ts : LDT;
      r_br : Real;
      i_ldr : Int;
   END_STRUCT;

END_TYPE

TYPE typ_Environment_Sensor:

   STRUCT
      ldt_ts : LDT;
      r_t : Real;
      r_rt : Real;
      r_h : Real;
      r_rh : Real;
      r_p : Real;
      i_iaq : Int;
      i_aq : Int;
      di_gr : DInt;
   END_STRUCT;

END_TYPE

TYPE typ_MQTT_Interface_Dashboard_Publish:
   STRUCT
      ldt_AcknowledgeButton : LDT;
      ConfigRateEnviormentSensor : typ_Config_Enviorment_Sensor;
      ConfigRateBrightnessSensor : typ_Config_Brightness_Sensor;
      ConfigRateCameraPicture : typ_Config_Camera_Picture;
      PosPanTiltUnit : typ_Pos_Pan_Tilt_Unit_Mov;
      OrderWorkpieceButton : typ_Order_Workpiece_Buttons;
      ActionButtonNFCModule : typ_Action_Buttons_NFC_Module;
   END_STRUCT;

END_TYPE

TYPE typ_Rack_History:

   STRUCT
      History : ARRAY[1..20] OF typ_History;
   END_STRUCT;

END_TYPE

TYPE typ_Axis:

   STRUCT
      x_Start_Positioning : Bool;
      x_Reference : Bool;
      x_Referenced : Bool;
      x_Position_Reached : Bool;
      di_Target_Position : DInt;
      di_Increment : DInt;
      di_Actual_Position : DInt := 0;
      i_PWM : Int;
      Config : typ_Axis_Data;
   END_STRUCT;

END_TYPE

TYPE typ_MQTT_Interface_Dashboard_Subscribe:

   STRUCT
      EnvironmentSensor : typ_Environment_Sensor;
      BrightnessSensor : typ_Brightness_Sensor;
      CameraPicture : typ_Camera_Picture;
      PosPanTiltUnit : typ_Pos_Pan_Tilt_Unit_Enc;
      AlertMessage : typ_Alert_Message;
      Broadcast : typ_Broadcast;
      State_HBW : typ_State_Client;
      State_VGR : typ_State_Client;
      State_MPO : typ_State_Client;
      State_SLD : typ_State_Client;
      State_DSI : typ_State_Client;
      State_DSO : typ_State_Client;
      Stock_HBW : typ_Stock_Item;
      State_Order : typ_Order_Workpiece_Buttons_State;
      State_NFC_Device : typ_NFC_Module_State;
   END_STRUCT;

END_TYPE

TYPE typ_Rack_Pos:

   STRUCT
      di_PosRack_Horizontal : DInt;
      di_PosRack_Vertical : DInt;
   END_STRUCT;

END_TYPE

TYPE typ_MQTT_Interface_TXT_Controler_Publish:

   STRUCT
      ActionButtonNFCModule : typ_SPS_Action_Buttons_NFC_Module;
   END_STRUCT;

END_TYPE

TYPE typ_MQTT_Interface_TXT_Controler_Subscribe:

   STRUCT
      State_NFC_Device : typ_SPS_NFC_Module_State;
   END_STRUCT;

END_TYPE

TYPE typ_MQTT_Interface_Dashboard:

   STRUCT
      Subscribe : typ_MQTT_Interface_Dashboard_Subscribe;
      Publish : typ_MQTT_Interface_Dashboard_Publish;
   END_STRUCT;

END_TYPE

TYPE typ_SetupAxis:

   STRUCT
      x_Setup_Activ : Bool;
      i_AxisSelection : Int;
      i_Function : Int;
      x_Set_Ref_Pos : Bool;
      x_Set_Soft_End_Pos : Bool;
      x_Approach_Ref_Pos : Bool;
      x_Axis_Pos : Bool;
      x_Axis_Neg : Bool;
      x_Approach_Target_Pos : Bool;
      w_Increment : Word;
      i_PWM : Int;
      di_Target_Position : DInt;
      di_ActualPosition : DInt;
      di_Ref_Pos : DInt;
      di_Actual_Ref_Pos : DInt;
      di_Soft_End_Pos_Neg : DInt;
      di_Actual_Soft_End_Pos_Neg : DInt;
      di_Soft_End_Pos_Pos : DInt;
      di_Actual_Soft_End_Pos_Pos : DInt;
      di_LoopValue : DInt;
   END_STRUCT;

END_TYPE

TYPE typ_MQTT_Interface_TXT_Controller:

   STRUCT
      Subscribe : typ_MQTT_Interface_TXT_Controler_Subscribe;
      Publish : typ_MQTT_Interface_TXT_Controler_Publish;
   END_STRUCT;

END_TYPE

TYPE typ_Setup:

   STRUCT
      r_Version_SPS : Real := 0.4;
      x_Fill_Rack_HBW : Bool;
      x_Start_TON_Fill_HBW : Bool;
      x_Clean_Rack_HBW : Bool;
      x_Park_Position : Bool;
      x_AcknowledgeButton : Bool;
      x_Color_Sensor_Calibration : Bool;
      x_Set_Calib_Value_Color_Blue : Bool;
      x_Set_Calib_Value_Color_White : Bool;
      x_Set_Calib_Value_Color_Red : Bool;
      x_Calculate_Value_Color : Bool;
      i_Color_Sensor_Selection : Int;
      w_Calib_ColorValue_Blue : Word;
      w_Calib_ColorValue_White : Word;
      w_Calib_ColorValue_Red : Word;
      w_Threshold_White_Red : Word;
      w_Threshold_Red_Blue : Word;
      w_Actual_ColorValue : Word;
      x_Set_Pos_Activ : Bool;
      x_Start_Positioning : Bool;
      x_Final_Positioning : Bool;
      x_Home_Positioning : Bool;
      x_Start_Offset : Bool;
      i_Pos_Selection : Int;
      di_Pos_Horizontal : DInt;
      di_Pos_Vertical : DInt;
      di_Pos_Rotate : DInt;
      x_Counter_Value_Calibration : Bool;
      i_Calib_CounterValue_Blue : Int := 26;
      i_Calib_CounterValue_White : Int := 5;
      i_Calib_CounterValue_Red : Int := 16;
      x_Set_CounterValues : Bool;
      x_Activate_Continuous_Operation : Bool;
   END_STRUCT;

END_TYPE

TYPE typ_MPO:

   STRUCT
      x_Start_Park_Position : Bool;
      x_Park_Position_Reached : Bool;
      x_Discard_Ready : Bool;
      x_MPO_Discards_Accepted : Bool;
      x_Error : Bool;
      i_PWM_TurnTable : Int := 700;
      i_PWM_Vacuum : Int := 1000;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
   END_STRUCT;

END_TYPE

TYPE typ_HBW:

   STRUCT
      x_Start_Park_Position : Bool;
      x_Park_Position_Reached : Bool;
      x_HBW_PickedUp_Accepted : Bool;
      x_HBW_Discards_Accepted : Bool;
      x_HBW_PickUp_Ready : Bool;
      x_HBW_Container_Available : Bool;
      x_Error : Bool;
      di_PosBelt_Horizontal : DInt;
      di_PosBelt_Vertical : DInt;
      di_Offset_Pos_Belt_Vertical : DInt;
      di_PosRack_A1_Horizontal : DInt;
      di_PosRack_A1_Vertical : DInt;
      di_PosRack_B2_Horizontal : DInt;
      di_PosRack_B2_Vertical : DInt;
      di_PosRack_C3_Horizontal : DInt;
      di_PosRack_C3_Vertical : DInt;
      di_Offset_Pos_Rack_Vertical : DInt;
      di_Pos_Park_Horizontal : DInt;
      di_Pos_Park_Vertical : DInt;
      i_PWM_ConveyorBelt : Int := 800;
      i_PWM_Cantilever : Int := 800;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
      Rack_Pos : ARRAY[1..3, 1..3] OF typ_Rack_Pos;
      Rack_Workpiece : ARRAY[1..3, 1..3] OF typ_Workpiece;
      Rack_History : ARRAY[1..3, 1..3] OF typ_Rack_History;
      Horizontal_Axis : typ_Axis;
      Vertical_Axis : typ_Axis;
   END_STRUCT;

END_TYPE

TYPE typ_VGR:

   STRUCT
      x_Start_Park_Position : Bool;
      x_Park_Position_Reached : Bool;
      x_NFC_Start_First : Bool;
      x_NFC_Start : Bool;
      x_NFC_Completed : Bool;
      x_HBW_Storage : Bool;
      x_HBW_Outsource : Bool;
      s_HBW_Outsource_Typ : String;
      x_HBW_Discards : Bool;
      x_HBW_PickedUp : Bool;
      x_MPO_Req_Discard : Bool;
      x_MPO_Discards : Bool;
      x_Ready_For_Outsource : Bool;
      x_State_Process : Bool;
      x_Workpiece_NiO : Bool;
      horizontal_Axis : typ_Axis;
      vertical_Axis : typ_Axis;
      rotate_Axis : typ_Axis;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
      di_Pos_DSI_horizontal : DInt;
      di_Pos_DSI_Collect_vertical : DInt;
      di_Pos_DSI_Discard_vertical : DInt;
      di_Offset_Pos_DSI_NFC_vertical : DInt;
      di_Pos_DSI_rotate : DInt;
      di_Pos_DSO_horizontal : DInt;
      di_Pos_DSO_Collect_vertical : DInt;
      di_Pos_DSO_Discard_vertical : DInt;
      di_Offset_Pos_DSO_vertical : DInt;
      di_Pos_DSO_rotate : DInt;
      di_Pos_Color_horizontal : DInt;
      di_Pos_Color_vertical : DInt;
      di_Pos_Color_rotate : DInt;
      di_Pos_NFC_horizontal : DInt;
      di_Pos_NFC_vertical : DInt;
      di_Pos_NFC_rotate : DInt;
      di_Pos_MPO_horizontal : DInt;
      di_Pos_MPO_vertical : DInt;
      di_Offset_Pos_MPO_vertical : DInt;
      di_Pos_MPO_rotate : DInt;
      di_Pos_HBW_horizontal : DInt;
      di_Offset_Pos_HBW_horizontal : DInt;
      di_Pos_HBW_Collect_vertical : DInt;
      di_Pos_HBW_Discard_vertical : DInt;
      di_Offset_Pos_HBW_vertical : DInt;
      di_Pos_HBW_rotate : DInt;
      di_Pos_NiO_horizontal : DInt;
      di_Pos_NiO_vertical : DInt;
      di_Pos_NiO_rotate : DInt;
      di_Pos_SLD_Blue_horizontal : DInt;
      di_Pos_SLD_Blue_vertical : DInt;
      di_Pos_SLD_Blue_rotate : DInt;
      di_Pos_SLD_Red_horizontal : DInt;
      di_Pos_SLD_Red_vertical : DInt;
      di_Pos_SLD_Red_rotate : DInt;
      di_Pos_SLD_White_horizontal : DInt;
      di_Pos_SLD_White_vertical : DInt;
      di_Pos_SLD_White_rotate : DInt;
      di_Pos_Park_horizontal : DInt;
      di_Pos_Park_vertical : DInt;
      di_Pos_Park_rotate : DInt;
   END_STRUCT;

END_TYPE

TYPE typ_SSC:

   STRUCT
      x_Start_Park_Position : Bool;
      x_Park_Position_Reached : Bool;
      x_Error : Bool;
      di_Pos_Centre_Horizontal : DInt;
      di_Pos_Centre_Vertical : DInt;
      di_Pos_HBW_Horizontal : DInt;
      di_Pos_HBW_Vertical : DInt;
      di_Pos_Park_Horizontal : DInt;
      di_Pos_Park_Vertical : DInt;
      w_Threshold_White_Red : Word;
      w_Threshold_Red_Blue : Word;
      Horizontal_Axis : typ_Axis;
      Vertical_Axis : typ_Axis;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
   END_STRUCT;

END_TYPE

TYPE typ_SLD:

   STRUCT
      x_Error : Bool;
      i_CounterValue_Blue : Int := 8;
      i_CounterValue_White : Int := 2;
      i_CounterValue_Red : Int := 4;
      i_Counter_Actual : Int;
      w_Threshold_White_Red : Word;
      w_Threshold_Red_Blue : Word;
      Workpiece : typ_Workpiece;
      History : ARRAY[1..20] OF typ_History;
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK FB_Blinker
   VAR_INPUT 
      int_periodendauer : Time;
   END_VAR

   VAR_OUTPUT 
      outx_blinker : Bool;
   END_VAR

   VAR 
      lfb_ton : TON_TIME;
      lx_esv_timer : Bool;
      lx_blinker : Bool;
   END_VAR



   lfb_ton(IN := NOT lx_esv_timer,
           PT := int_periodendauer / 2,
           Q => lx_esv_timer);
   
   IF lx_esv_timer THEN
       lx_blinker := NOT lx_blinker;
   END_IF;
   
   outx_blinker := lx_blinker;
END_FUNCTION_BLOCK

DATA_BLOCK gtyp_Interface_TXT_Controler NON_RETAIN typ_MQTT_Interface_TXT_Controller



END_DATA_BLOCK

DATA_BLOCK gtyp_Interface_Dashboard
NON_RETAIN
typ_MQTT_Interface_Dashboard



END_DATA_BLOCK

DATA_BLOCK gtyp_HBW
typ_HBW


   di_PosBelt_Horizontal := 18;
   di_PosBelt_Vertical := 2800;
   di_Offset_Pos_Belt_Vertical := 370;
   di_PosRack_A1_Horizontal := 2870;
   di_PosRack_A1_Vertical := 400;
   di_PosRack_B2_Horizontal := 5200;
   di_PosRack_B2_Vertical := 1750;
   di_PosRack_C3_Horizontal := 7560;
   di_PosRack_C3_Vertical := 3250;
   di_Offset_Pos_Rack_Vertical := 370;
   di_Pos_Park_Horizontal := 600;
   di_Pos_Park_Vertical := 3200;
   i_PWM_Cantilever := 1000;
   Rack_Pos[1,1].di_PosRack_Horizontal := 2870;
   Rack_Pos[1,1].di_PosRack_Vertical := 400;
   Rack_Pos[1,2].di_PosRack_Horizontal := 5200;
   Rack_Pos[1,2].di_PosRack_Vertical := 400;
   Rack_Pos[1,3].di_PosRack_Horizontal := 7550;
   Rack_Pos[1,3].di_PosRack_Vertical := 400;
   Rack_Pos[2,1].di_PosRack_Horizontal := 2870;
   Rack_Pos[2,1].di_PosRack_Vertical := 1750;
   Rack_Pos[2,2].di_PosRack_Horizontal := 5200;
   Rack_Pos[2,2].di_PosRack_Vertical := 1750;
   Rack_Pos[2,3].di_PosRack_Horizontal := 7550;
   Rack_Pos[2,3].di_PosRack_Vertical := 1750;
   Rack_Pos[3,1].di_PosRack_Horizontal := 2870;
   Rack_Pos[3,1].di_PosRack_Vertical := 3150;
   Rack_Pos[3,2].di_PosRack_Horizontal := 5200;
   Rack_Pos[3,2].di_PosRack_Vertical := 3150;
   Rack_Pos[3,3].di_PosRack_Horizontal := 7550;
   Rack_Pos[3,3].di_PosRack_Vertical := 3150;
   Rack_Workpiece[1,1].s_id := '0';
   Rack_Workpiece[1,2].s_id := '0';
   Rack_Workpiece[1,3].s_id := '0';
   Rack_Workpiece[2,1].s_id := '0';
   Rack_Workpiece[2,2].s_id := '0';
   Rack_Workpiece[2,3].s_id := '0';
   Rack_Workpiece[3,1].s_id := '0';
   Rack_Workpiece[3,2].s_id := '0';
   Rack_Workpiece[3,3].s_id := '0';
   Horizontal_Axis.i_PWM := 700;
   Horizontal_Axis.Config.di_Pos_Soft_Switch := 7900;
   Horizontal_Axis.Config.di_Neg_Soft_Switch := 0;
   Horizontal_Axis.Config.di_Ref_Pos := 0;
   Horizontal_Axis.Config.di_Loop_Value := 0;
   Horizontal_Axis.Config.di_Pos_Window := 15;
   Vertical_Axis.i_PWM := 600;
   Vertical_Axis.Config.di_Pos_Soft_Switch := 3350;
   Vertical_Axis.Config.di_Neg_Soft_Switch := 0;
   Vertical_Axis.Config.di_Ref_Pos := 0;
   Vertical_Axis.Config.di_Loop_Value := 0;
   Vertical_Axis.Config.di_Pos_Window := 15;

END_DATA_BLOCK

DATA_BLOCK gtyp_VGR
typ_VGR


   horizontal_Axis.i_PWM := 500;
   horizontal_Axis.Config.di_Pos_Soft_Switch := 20000;
   horizontal_Axis.Config.di_Neg_Soft_Switch := 0;
   horizontal_Axis.Config.di_Ref_Pos := 0;
   horizontal_Axis.Config.di_Loop_Value := 0;
   vertical_Axis.i_PWM := 800;
   vertical_Axis.Config.di_Pos_Soft_Switch := 20000;
   vertical_Axis.Config.di_Neg_Soft_Switch := 0;
   vertical_Axis.Config.di_Ref_Pos := 0;
   vertical_Axis.Config.di_Loop_Value := 0;
   rotate_Axis.i_PWM := 500;
   rotate_Axis.Config.di_Pos_Soft_Switch := 20000;
   rotate_Axis.Config.di_Neg_Soft_Switch := 0;
   rotate_Axis.Config.di_Ref_Pos := 0;
   rotate_Axis.Config.di_Loop_Value := 0;
   di_Pos_DSI_horizontal := 20;
   di_Pos_DSI_Collect_vertical := 2950;
   di_Offset_Pos_DSI_NFC_vertical := 1200;
   di_Pos_DSI_rotate := 30;
   di_Pos_DSO_horizontal := 2070;
   di_Pos_DSO_Discard_vertical := 1480;
   di_Offset_Pos_DSO_vertical := 500;
   di_Pos_DSO_rotate := 970;
   di_Pos_Color_horizontal := 150;
   di_Pos_Color_vertical := 2450;
   di_Pos_Color_rotate := 430;
   di_Pos_NFC_horizontal := 900;
   di_Pos_NFC_vertical := 2450;
   di_Pos_NFC_rotate := 700;
   di_Pos_MPO_horizontal := 3400;
   di_Pos_MPO_vertical := 1800;
   di_Offset_Pos_MPO_vertical := 650;
   di_Pos_MPO_rotate := 3500;
   di_Pos_HBW_horizontal := 600;
   di_Offset_Pos_HBW_horizontal := 0;
   di_Pos_HBW_Collect_vertical := 650;
   di_Pos_HBW_Discard_vertical := 200;
   di_Offset_Pos_HBW_vertical := 100;
   di_Pos_HBW_rotate := 5350;
   di_Pos_NiO_horizontal := 0;
   di_Pos_NiO_vertical := 2700;
   di_Pos_NiO_rotate := 1100;
   di_Pos_SLD_Blue_horizontal := 2150;
   di_Pos_SLD_Blue_vertical := 3100;
   di_Pos_SLD_Blue_rotate := 1200;
   di_Pos_SLD_Red_horizontal := 1580;
   di_Pos_SLD_Red_vertical := 3100;
   di_Pos_SLD_Red_rotate := 1460;
   di_Pos_SLD_White_horizontal := 1370;
   di_Pos_SLD_White_vertical := 3100;
   di_Pos_SLD_White_rotate := 1770;
   di_Pos_Park_horizontal := 150;
   di_Pos_Park_vertical := 3000;
   di_Pos_Park_rotate := 1750;

END_DATA_BLOCK

DATA_BLOCK gtyp_SetupAxis
NON_RETAIN
typ_SetupAxis



END_DATA_BLOCK

FUNCTION_BLOCK FB_Axis
   VAR_INPUT 
      ini_Axis : Int;
      indi_Increment : DInt;
      inx_Ref_Switch : Bool;
      inx_Start_Positioning : Bool;
      inx_Referencing : Bool;
      ini_PWM : Int;
      indi_Target_Position : DInt;
   END_VAR

   VAR_OUTPUT 
      outx_Referenced : Bool;
      outx_Position_Reached : Bool;
      outx_Motor_Pos : Bool;
      outx_Motor_Neg : Bool;
      outi_Motor_PWM : Int;
      outdi_Actual_Position : DInt;
   END_VAR

   VAR_IN_OUT 
      inouttyp_Config : typ_Axis_Data;
      inouttyp_Setup : typ_SetupAxis;
   END_VAR

   VAR 
      li_StepCaseSetup : Int;
      li_StepCase : Int;
      lx_Init : Bool;
      lx_Motor_Neg : Bool;
      lx_Motor_Pos : Bool;
      lx_Start_TON_Wait : Bool;
      li_PWM : Int;
      ldi_ValueStep : DInt;
      ldi_Actual_Position : DInt;
      ldi_Actual_Position_Old : DInt;
      lfb_R_Trig_Setup : R_TRIG;
      lfb_R_Trig_Referencing : R_TRIG;
      lfb_TON_Wait : TON_TIME;
   END_VAR



   IF lx_Init THEN
       lfb_R_Trig_Setup(CLK := inouttyp_Setup.x_Setup_Activ);
       
       IF lfb_R_Trig_Setup.Q THEN
           inouttyp_Setup.di_LoopValue               := inouttyp_Config.di_Loop_Value;
           inouttyp_Setup.di_Ref_Pos                 := 0;
           inouttyp_Setup.di_Actual_Ref_Pos          := inouttyp_Config.di_Ref_Pos;
           inouttyp_Setup.di_Soft_End_Pos_Neg        := 0;
           inouttyp_Setup.di_Actual_Soft_End_Pos_Neg := inouttyp_Config.di_Neg_Soft_Switch;
           inouttyp_Setup.di_Soft_End_Pos_Pos        := 0;
           inouttyp_Setup.di_Actual_Soft_End_Pos_Pos := inouttyp_Config.di_Pos_Soft_Switch;
           inouttyp_Setup.i_PWM                      := ini_PWM;
           inouttyp_Setup.x_Approach_Ref_Pos         := FALSE;
           inouttyp_Setup.x_Approach_Target_Pos      := FALSE;
           inouttyp_Setup.x_Axis_Neg                 := FALSE;
           inouttyp_Setup.x_Axis_Pos                 := FALSE;
           inouttyp_Setup.x_Set_Ref_Pos              := FALSE;
           inouttyp_Setup.x_Set_Soft_End_Pos         := FALSE;
       END_IF;
       
       ldi_Actual_Position := indi_Increment;
       
       
       lfb_R_Trig_Referencing(CLK := inx_Referencing);
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := T#200ms);
       
       IF inouttyp_Setup.i_AxisSelection = ini_Axis AND inouttyp_Setup.x_Setup_Activ THEN
           IF inouttyp_Setup.x_Approach_Ref_Pos THEN
               inouttyp_Setup.i_Function := 10;
           END_IF;
           
           CASE inouttyp_Setup.i_Function OF
                   
               0:  
                   ldi_Actual_Position_Old := 0;
                   inouttyp_Setup.x_Approach_Ref_Pos := FALSE;
                   lx_Start_TON_Wait := FALSE;
                   
               10: 
                   IF inouttyp_Setup.x_Approach_Ref_Pos THEN
                       IF NOT inx_Ref_Switch THEN
                           lx_Motor_Neg := TRUE;
                           lx_Motor_Pos := FALSE;
                           outx_Referenced := FALSE;
                       END_IF;
                       
                       IF inx_Ref_Switch THEN
                           lx_Motor_Neg := TRUE;
                           lx_Motor_Pos := TRUE;
                           
                           IF ldi_Actual_Position = inouttyp_Config.di_Ref_Pos THEN
                               inouttyp_Setup.x_Approach_Ref_Pos := FALSE;
                               lx_Motor_Neg       := FALSE;
                               lx_Motor_Pos       := FALSE;
                               outx_Referenced    := TRUE;
                           END_IF;
                       END_IF;
                   END_IF;
                   
               20:  
                   lx_Motor_Neg := inouttyp_Setup.x_Axis_Neg AND NOT inx_Ref_Switch AND NOT (ldi_Actual_Position <= inouttyp_Setup.di_Soft_End_Pos_Neg);
                   lx_Motor_Pos := inouttyp_Setup.x_Axis_Pos AND NOT lx_Motor_Neg AND NOT (ldi_Actual_Position >= inouttyp_Setup.di_Soft_End_Pos_Pos);
                   
               30:  
                   ldi_Actual_Position_Old := ldi_Actual_Position;
                   
                   
                   IF inouttyp_Setup.x_Axis_Pos AND NOT ((ldi_Actual_Position + inouttyp_Setup.w_Increment + inouttyp_Setup.di_LoopValue) >= inouttyp_Setup.di_Soft_End_Pos_Pos) THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := TRUE;
                       ldi_ValueStep := ldi_Actual_Position_Old + inouttyp_Setup.w_Increment;
                       
                       
                       IF (inouttyp_Setup.di_LoopValue = 0) THEN
                           inouttyp_Setup.i_Function := 36;
                       ELSE
                           inouttyp_Setup.i_Function := 31;
                       END_IF;
                   
                   ELSIF inouttyp_Setup.x_Axis_Neg AND NOT ((ldi_Actual_Position - inouttyp_Setup.w_Increment) <= inouttyp_Config.di_Neg_Soft_Switch) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := FALSE;
                       ldi_ValueStep := ldi_Actual_Position_Old - inouttyp_Setup.w_Increment;
                       inouttyp_Setup.i_Function := 34;
                   END_IF;
                   
               31: 
                   IF ((ldi_Actual_Position >= (ldi_ValueStep + inouttyp_Setup.di_LoopValue - inouttyp_Config.di_Pos_Window)) = 0) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       inouttyp_Setup.i_Function := 32;
                   END_IF;
                   
               32: 
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg               := FALSE;
                       lx_Motor_Pos               := FALSE;
                       lx_Start_TON_Wait          := FALSE;
                       inouttyp_Setup.i_Function  := 33;
                   END_IF;
                   
               33: 
                   lx_Motor_Neg := TRUE;
                   lx_Motor_Pos := FALSE;
                   inouttyp_Setup.i_Function := 34;
                   
               34: 
                   IF (ldi_Actual_Position <= (ldi_ValueStep + inouttyp_Config.di_Pos_Window))
                       AND (ldi_Actual_Position >= (ldi_ValueStep - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       inouttyp_Setup.i_Function := 35;
                   END_IF;
                   
               35: 
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       inouttyp_Setup.x_Axis_Neg := FALSE;
                       inouttyp_Setup.x_Axis_Pos := FALSE;
                       inouttyp_Setup.i_Function := 30;
                   END_IF;
                       
                   
               36: 
                   IF (ldi_Actual_Position <= (ldi_ValueStep + inouttyp_Config.di_Pos_Window))
                       AND (ldi_Actual_Position >= (ldi_ValueStep - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       inouttyp_Setup.i_Function := 37;
                   END_IF;
               
               37: 
                   lx_Start_TON_Wait := TRUE;
               
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       inouttyp_Setup.x_Axis_Neg := FALSE;
                       inouttyp_Setup.x_Axis_Pos := FALSE;
                       inouttyp_Setup.i_Function := 30;
                   END_IF;
                   
               40: 
                   IF inouttyp_Setup.x_Approach_Target_Pos THEN
                       
                       IF (inouttyp_Setup.di_Target_Position > ldi_Actual_Position) AND NOT ((inouttyp_Setup.di_Target_Position + inouttyp_Setup.di_LoopValue) >= inouttyp_Setup.di_Soft_End_Pos_Pos)  THEN
                           lx_Motor_Neg := FALSE;
                           lx_Motor_Pos := TRUE;
                           
                           IF (inouttyp_Setup.di_LoopValue = 0) THEN
                               inouttyp_Setup.i_Function := 46;
                           ELSE
                               inouttyp_Setup.i_Function := 41;
                           END_IF;
                       
                       ELSIF ((inouttyp_Setup.di_Target_Position < ldi_Actual_Position) AND NOT (inouttyp_Setup.di_Target_Position <= inouttyp_Config.di_Neg_Soft_Switch))  THEN
                           lx_Motor_Neg := TRUE;
                           lx_Motor_Pos := FALSE;
                           inouttyp_Setup.i_Function := 44;
                       ELSIF (inouttyp_Setup.di_Target_Position = ldi_Actual_Position) THEN
                           inouttyp_Setup.i_Function := 46;
                       END_IF;
                       
                   END_IF;
                   
               41: 
                   IF (ldi_Actual_Position >= (inouttyp_Setup.di_Target_Position + inouttyp_Setup.di_LoopValue - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       inouttyp_Setup.i_Function := 42;
                   END_IF;
                   
               42: 
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       inouttyp_Setup.i_Function := 43;
                   END_IF;
                   
               43: 
                   lx_Motor_Neg   := TRUE;
                   lx_Motor_Pos   := FALSE;
                   inouttyp_Setup.i_Function     := 44;
               
               44: 
                   IF (ldi_Actual_Position <= (inouttyp_Setup.di_Target_Position + inouttyp_Config.di_Pos_Window))
                       AND (ldi_Actual_Position >= (inouttyp_Setup.di_Target_Position - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       inouttyp_Setup.i_Function := 45;
                   END_IF;
                   
               45: 
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       inouttyp_Setup.x_Axis_Neg := FALSE;
                       inouttyp_Setup.x_Axis_Pos := FALSE;
                       inouttyp_Setup.i_Function := 40;
                   END_IF;
                   
               46: 
                   IF (ldi_Actual_Position <= (inouttyp_Setup.di_Target_Position + inouttyp_Config.di_Pos_Window))
                       AND (ldi_Actual_Position >= (inouttyp_Setup.di_Target_Position - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       inouttyp_Setup.i_Function := 47;
                   END_IF;
                   
               47:  
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       inouttyp_Setup.x_Approach_Target_Pos := FALSE;
                       inouttyp_Setup.i_Function := 40;
                   END_IF;
               ELSE  
                   ;
           END_CASE;
           
           
           IF inouttyp_Setup.x_Set_Ref_Pos THEN
               inouttyp_Setup.di_Actual_Ref_Pos   := 0;
               inouttyp_Config.di_Ref_Pos         := inouttyp_Setup.di_Ref_Pos;
               inouttyp_Setup.x_Set_Ref_Pos       := FALSE;
           END_IF;
           
           
           IF inouttyp_Setup.x_Set_Soft_End_Pos THEN
               inouttyp_Setup.di_Actual_Soft_End_Pos_Neg  := 0;
               inouttyp_Config.di_Neg_Soft_Switch         := inouttyp_Setup.di_Soft_End_Pos_Neg;
               inouttyp_Setup.di_Actual_Soft_End_Pos_Pos  := 0;
               inouttyp_Config.di_Pos_Soft_Switch         := inouttyp_Setup.di_Soft_End_Pos_Pos;
               inouttyp_Setup.x_Set_Soft_End_Pos := FALSE;
           END_IF;
           
           
           li_PWM := inouttyp_Setup.i_PWM;
           
           
           inouttyp_Setup.di_ActualPosition           := ldi_Actual_Position;
   
       ELSIF NOT inouttyp_Setup.x_Setup_Activ THEN
                   
           
           IF lfb_R_Trig_Referencing.Q THEN
               li_StepCase := 0;
           END_IF;
                   
           CASE li_StepCase OF
                   
               0:  
                   lx_Start_TON_Wait := FALSE;
                   
                   IF inx_Referencing THEN
                       li_StepCase            := 10;
                       outx_Position_Reached  := FALSE;
                       outx_Referenced        := FALSE;
                   ELSIF inx_Start_Positioning THEN
                       li_StepCase            := 20;
                       outx_Position_Reached  := FALSE;
                   END_IF;
                   
               10: 
                   IF NOT inx_Ref_Switch THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := FALSE;
                   END_IF;
                   
                   IF inx_Ref_Switch THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       
                       IF inx_Ref_Switch THEN
                           IF ldi_Actual_Position = inouttyp_Config.di_Ref_Pos THEN
                               lx_Motor_Neg := FALSE;
                               lx_Motor_Pos := FALSE;
                               outx_Referenced := TRUE;
                               li_StepCase := 11;
                           END_IF;
                       END_IF;
                   END_IF;
                   
               11: 
                   IF NOT inx_Referencing THEN
                       li_StepCase := 0;
                   END_IF;
                   
               20: 
                   
                   IF (indi_Target_Position > ldi_Actual_Position) AND NOT ((indi_Target_Position + inouttyp_Config.di_Loop_Value) >= inouttyp_Config.di_Pos_Soft_Switch) THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := TRUE;
                       
                       IF (inouttyp_Config.di_Loop_Value = 0) THEN
                           li_StepCase := 26;
                       ELSE
                           li_StepCase := 21;
                       END_IF;
                   
                   ELSIF ((indi_Target_Position < ldi_Actual_Position) AND NOT (indi_Target_Position <= inouttyp_Config.di_Neg_Soft_Switch)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := FALSE;
                       li_StepCase := 24;
                   ELSIF (indi_Target_Position = ldi_Actual_Position) THEN
                       li_StepCase := 26;
                   END_IF;
                   
               21: 
                   IF (ldi_Actual_Position >= (indi_Target_Position + inouttyp_Config.di_Loop_Value - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       li_StepCase := 22;
                   END_IF;
                   
               22: 
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       inouttyp_Setup.i_Function := 23;
                   END_IF;
                     
               23: 
                   lx_Motor_Neg := TRUE;
                   lx_Motor_Pos := FALSE;
                   li_StepCase := 24;
                   
               24: 
                   IF (ldi_Actual_Position <= (indi_Target_Position + inouttyp_Config.di_Pos_Window))
                       AND (ldi_Actual_Position >= (indi_Target_Position - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       li_StepCase := 25;
                   END_IF;
                   
               25: 
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       outx_Position_Reached := TRUE;
                       li_StepCase := 28;
                   END_IF;
                   
               26: 
                   IF (ldi_Actual_Position <= (indi_Target_Position + inouttyp_Config.di_Pos_Window))
                       AND (ldi_Actual_Position >= (indi_Target_Position - inouttyp_Config.di_Pos_Window)) THEN
                       lx_Motor_Neg := TRUE;
                       lx_Motor_Pos := TRUE;
                       li_StepCase := 27;
                   END_IF;
                   
               27: 
                   lx_Start_TON_Wait := TRUE;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Motor_Neg := FALSE;
                       lx_Motor_Pos := FALSE;
                       lx_Start_TON_Wait := FALSE;
                       outx_Position_Reached := TRUE;
                       li_StepCase := 28;
                   END_IF;
                   
               28: 
                   IF NOT inx_Start_Positioning THEN
                       li_StepCase := 0;
                   END_IF;
               
               ELSE  
                   ;
           END_CASE;
           
           
           li_PWM := ini_PWM;
       END_IF;
       
       
       outx_Motor_Neg         := lx_Motor_Neg;
       outx_Motor_Pos         := lx_Motor_Pos;
       outi_Motor_PWM         := li_PWM;
       outdi_Actual_Position  := ldi_Actual_Position;
       
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

DATA_BLOCK gtyp_SSC
typ_SSC


   di_Pos_Centre_Horizontal := 3000;
   di_Pos_Centre_Vertical := 1400;
   di_Pos_HBW_Horizontal := 5400;
   di_Pos_HBW_Vertical := 950;
   di_Pos_Park_Horizontal := 3000;
   di_Pos_Park_Vertical := 200;
   w_Threshold_White_Red := 16#25DA;
   w_Threshold_Red_Blue := 16#3C57;
   Horizontal_Axis.i_PWM := 1000;
   Horizontal_Axis.Config.di_Pos_Soft_Switch := 5450;
   Horizontal_Axis.Config.di_Neg_Soft_Switch := 0;
   Horizontal_Axis.Config.di_Ref_Pos := 0;
   Horizontal_Axis.Config.di_Loop_Value := 0;
   Horizontal_Axis.Config.di_Pos_Window := 25;
   Vertical_Axis.i_PWM := 1000;
   Vertical_Axis.Config.di_Pos_Soft_Switch := 3000;
   Vertical_Axis.Config.di_Neg_Soft_Switch := 0;
   Vertical_Axis.Config.di_Ref_Pos := 0;
   Vertical_Axis.Config.di_Loop_Value := 0;
   Vertical_Axis.Config.di_Pos_Window := 25;

END_DATA_BLOCK

DATA_BLOCK gtyp_Setup
NON_RETAIN
typ_Setup



END_DATA_BLOCK

DATA_BLOCK gtyp_MPO
typ_MPO


   i_PWM_TurnTable := 1000;

END_DATA_BLOCK

FUNCTION_BLOCK FC_Scale_linear : Real
   VAR_INPUT 
      inr_Y1 : Real;  
      inr_Y2 : Real;  
      inr_X1 : Real;  
      inr_X2 : Real;  
      inr_X : Real;   
   END_VAR

   VAR_TEMP 
      lr_y_delta : Real; lr_x_delta : Real; lr_m : Real;   
   END_VAR


   lr_y_delta := (inr_Y2 - inr_Y1);
   lr_x_delta := (inr_X2 - inr_X1);
   
   IF lr_y_delta <> 0 AND lr_x_delta <> 0 THEN
       lr_m := (lr_y_delta / lr_x_delta);
       FC_Scale_linear := (lr_m * (inr_X - inr_X1)) + inr_Y1;
   ELSE
       FC_Scale_linear := 0;
   END_IF;
END_FUNCTION_BLOCK

DATA_BLOCK gtyp_SLD
typ_SLD

   i_CounterValue_Blue := 26;
   i_CounterValue_White := 5;
   i_CounterValue_Red := 16;
   w_Threshold_White_Red := 16#2698;
   w_Threshold_Red_Blue := 16#3D41;

END_DATA_BLOCK

FUNCTION_BLOCK PRG_VGR_Ablauf
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Start_TON_State : Bool;
      lt_TON_Wait : Time;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      li_Lights : Int;
      li_Lights_old : Int;
      lx_State_activ : Bool;
      li_StepCase : Int;
      li_Counter : Int;
      ldi_Pos_SLD_X : DInt;
      ldi_Pos_SLD_Y : DInt;
      ldi_Pos_SLD_Z : DInt;
      ls_Color : String;
      ls_Target : String;
      lfb_TON_Wait : TON_TIME;
      lfb_TON_State : TON_TIME;
      lfb_R_Trig_NiO : R_TRIG;
   END_VAR

   IF lx_Init THEN
       IF gtyp_Setup.x_Set_Pos_Activ OR gtyp_Setup.x_Color_Sensor_Calibration OR gtyp_VGR.x_Start_Park_Position OR gtyp_MPO.x_Error THEN
           IF gtyp_MPO.x_Error THEN
               gtyp_VGR.x_MPO_Req_Discard := FALSE;
               gtyp_VGR.x_MPO_Discards := FALSE;
           END_IF;
           li_StepCase := 0;
       END_IF;
       
       
       lfb_TON_State(IN := NOT lx_Start_TON_State,
                       PT := T#2s);
       
        IF gtyp_VGR.x_State_Process THEN
            li_Return_LDT := RD_SYS_T(ldt_MQTT);
            gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
        END_IF;
        
       
       IF (lfb_TON_State.Q OR (li_Lights <> li_Lights_old)) AND NOT lx_Start_TON_State THEN
           li_Lights_old := li_Lights;
           lx_Start_TON_State := TRUE;
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_VGR.ldt_ts       := DT_TO_LDT(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_VGR.i_code       := li_Lights;
           gtyp_Interface_Dashboard.Subscribe.State_VGR.s_description:= '';
           gtyp_Interface_Dashboard.Subscribe.State_VGR.s_station    := 'vgr';
           gtyp_Interface_Dashboard.Subscribe.State_VGR.s_target     := ls_Target;
           gtyp_Interface_Dashboard.Subscribe.State_VGR.x_active     := lx_State_activ;
           
           gtyp_Interface_Dashboard.Subscribe.PosPanTiltUnit.ldt_ts := DT_TO_LDT(ldt_MQTT);
       END_IF;
       
       
       IF NOT lfb_TON_State.Q AND lx_Start_TON_State THEN
           lx_Start_TON_State := FALSE;
       END_IF;
       
       
       lfb_R_Trig_NiO(CLK := gtyp_VGR.x_Workpiece_NiO);
       
       IF lfb_R_Trig_NiO.Q THEN
           lx_Start_TON_Wait := FALSE;
           lx_State_activ := FALSE;
           li_Lights := 4;
           ls_Target := '';
           gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
           gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
           gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
           gtyp_VGR.x_NFC_Start_First := FALSE;
           gtyp_VGR.x_NFC_Start := FALSE;
           li_StepCase := 70;
       END_IF;
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                       PT := lt_TON_Wait);
      
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_Lights := 1;
               lx_State_activ := FALSE;
               ls_Target := '';
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               gtyp_VGR.x_HBW_Storage := FALSE;
               gtyp_VGR.x_HBW_Outsource := FALSE;
               gtyp_VGR.x_NFC_Start_First := FALSE;
               gtyp_VGR.x_NFC_Start := FALSE;
               gtyp_VGR.x_Ready_For_Outsource := FALSE;
               QX_VGR_Compressor_Q7 := FALSE;
               QX_VGR_ValveVacuum_Q8 := FALSE;
               
               IF NOT gtyp_Setup.x_Set_Pos_Activ AND NOT gtyp_VGR.x_Start_Park_Position AND NOT gtyp_MPO.x_Error THEN
                   li_StepCase := 10;
               END_IF;
               
           10: 
               li_Lights := 2;
               gtyp_VGR.x_Ready_For_Outsource        := TRUE;
               gtyp_VGR.vertical_Axis.x_Reference    := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM          := 800;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 20;
               END_IF;
               
           20: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 30;
               END_IF;
               
           30: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 40;
               END_IF;
               
           40: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 50;
               END_IF;
               
           50: 
               gtyp_VGR.rotate_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.rotate_Axis.x_Referenced THEN
                   li_StepCase := 60;
               END_IF;
               
           60: 
               IF gtyp_VGR.rotate_Axis.x_Referenced THEN
                   gtyp_VGR.rotate_Axis.x_Reference := FALSE;
                   li_StepCase := 70;
               END_IF;
               
           70: 
               
               li_Lights := 1;
               lx_State_activ := FALSE;
               ls_Target := '';
               gtyp_VGR.x_Ready_For_Outsource := TRUE;
               
               
               IF gtyp_VGR.x_Workpiece_NiO THEN
                   gtyp_VGR.x_Ready_For_Outsource := FALSE;
                   li_Lights := 4;
                   li_StepCase := 1200;
               
               ELSIF NOT IX_SLD_LightBarrierBlue_I7 THEN
                   ldi_Pos_SLD_X := gtyp_VGR.di_Pos_SLD_Blue_horizontal;
                   ldi_Pos_SLD_Y := gtyp_VGR.di_Pos_SLD_Blue_vertical;
                   ldi_Pos_SLD_Z := gtyp_VGR.di_Pos_SLD_Blue_rotate;
                   gtyp_VGR.x_Ready_For_Outsource := FALSE;
                   li_StepCase := 100;
               
               ELSIF NOT IX_SLD_LightBarrierRed_I6 THEN
                   ldi_Pos_SLD_X := gtyp_VGR.di_Pos_SLD_Red_horizontal;
                   ldi_Pos_SLD_Y := gtyp_VGR.di_Pos_SLD_Red_vertical;
                   ldi_Pos_SLD_Z := gtyp_VGR.di_Pos_SLD_Red_rotate;
                   gtyp_VGR.x_Ready_For_Outsource := FALSE;
                   li_StepCase := 100;
               
               ELSIF NOT IX_SLD_LightBarrierWhite_I5 THEN
                   ldi_Pos_SLD_X := gtyp_VGR.di_Pos_SLD_White_horizontal;
                   ldi_Pos_SLD_Y := gtyp_VGR.di_Pos_SLD_White_vertical;
                   ldi_Pos_SLD_Z := gtyp_VGR.di_Pos_SLD_White_rotate;
                   gtyp_VGR.x_Ready_For_Outsource := FALSE;
                   li_StepCase := 100;
               
               ELSIF gtyp_VGR.x_HBW_Outsource THEN
                   
                   gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_state := 'ORDERED';
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_type := gtyp_VGR.s_HBW_Outsource_Typ;
                   li_StepCase := 400;
               
               ELSIF NOT IX_SSC_LightBarrierStorage_I3 THEN
                   gtyp_VGR.x_Ready_For_Outsource := FALSE;
                   li_Lights := 2;
                   gtyp_VGR.x_HBW_Storage  := TRUE;
                   li_StepCase                := 600;
               END_IF;
           100: 
               
               li_Lights := 2;
               gtyp_VGR.horizontal_Axis.di_Target_Position := ldi_Pos_SLD_X;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 800;
               
               gtyp_VGR.rotate_Axis.di_Target_Position := ldi_Pos_SLD_Z;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (ldi_Pos_SLD_X + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (ldi_Pos_SLD_X - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (ldi_Pos_SLD_Z + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (ldi_Pos_SLD_Z - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 110;
               END_IF;
               
           110: 
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (ldi_Pos_SLD_X + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (ldi_Pos_SLD_X - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (ldi_Pos_SLD_Z + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (ldi_Pos_SLD_Z - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (ldi_Pos_SLD_X + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (ldi_Pos_SLD_X - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND gtyp_VGR.vertical_Axis.x_Referenced
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (ldi_Pos_SLD_Z + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (ldi_Pos_SLD_Z - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 120;
               END_IF;
               
           120: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 130;
               END_IF;
               
           130: 
               gtyp_VGR.vertical_Axis.di_Target_Position := ldi_Pos_SLD_Y;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (ldi_Pos_SLD_Y + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (ldi_Pos_SLD_Y - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 140;
               END_IF;
               
           140: 
               QX_VGR_Compressor_Q7 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 150;
               END_IF;
               
           150: 
               QX_VGR_ValveVacuum_Q8 := true;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   lx_State_activ := TRUE;
                   ls_Target := 'dso';
                   gtyp_VGR.History   := gtyp_SLD.History;
                   gtyp_VGR.Workpiece := gtyp_SLD.Workpiece;
                   gtyp_SLD.Workpiece.s_id := '0';
                   gtyp_SLD.Workpiece.s_state := '';
                   gtyp_SLD.Workpiece.s_type := '';
                   FOR li_Counter := 1 TO 8 DO
                       gtyp_SLD.History[li_Counter].i_code := 0;
                       gtyp_SLD.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
                   
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   gtyp_VGR.History[8].i_code := 800;
                   gtyp_VGR.History[8].ldt_ts := DT_TO_LDT(ldt_MQTT);
                   
                   gtyp_Interface_Dashboard.Subscribe.State_SLD.x_active := FALSE;
                   
                   li_StepCase := 160;
               END_IF;
               
           160: 
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 800;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 170;
               END_IF;
               
           170: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 180;
               END_IF;
               
           180: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference           := FALSE;
                   li_StepCase := 190;
               END_IF;
               
           190: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 200;
               END_IF;
               
           200: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 210;
               END_IF;
               
           210: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 220;
               END_IF;
               
           220: 
               
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 230;
               END_IF;
               
           230: 
               
               gtyp_VGR.x_NFC_Start := TRUE;
               
               IF gtyp_VGR.x_NFC_Completed THEN
                   gtyp_VGR.x_NFC_Start := FALSE;
                   li_StepCase := 240;
               END_IF;
               
           240: 
               
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 800;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 250;
               END_IF;
               
           250: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 260;
               END_IF;
               
           260: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 270;
               END_IF;
               
           270: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_DSO_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_DSO_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSO_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSO_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSO_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSO_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSO_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSO_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSO_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSO_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached
                   AND IX_SSC_LightBarrierOutsourcing_I4 THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 280;
               END_IF;
               
           280: 
               
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_DSO_Discard_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSO_Discard_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSO_Discard_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.x_State_Process := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 290;
               END_IF;
               
           290: 
               QX_VGR_ValveVacuum_Q8 := FALSE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   
                   gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_state := 'SHIPPED';
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_type := gtyp_VGR.Workpiece.s_type;
                   gtyp_SSC.Workpiece := gtyp_VGR.Workpiece;
                   gtyp_SSC.History   := gtyp_VGR.History;
                   gtyp_VGR.Workpiece.s_id := '0';
                   gtyp_VGR.Workpiece.s_state := '';
                   gtyp_VGR.Workpiece.s_type := '';
                   FOR li_Counter := 1 TO 8 DO
                       gtyp_VGR.History[li_Counter].i_code := 0;
                       gtyp_VGR.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
                   
                   gtyp_Interface_Dashboard.Subscribe.State_DSO.x_active := TRUE;
                   
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 300;
               END_IF;
               
           300: 
               QX_VGR_Compressor_Q7 := FALSE;
               lx_State_activ := FALSE;
               ls_Target := '';
               li_StepCase := 310;
               
           310: 
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 320;
               END_IF;
               
           320: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 330;
               END_IF;
               
           330: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               gtyp_VGR.rotate_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced AND NOT gtyp_VGR.rotate_Axis.x_Referenced THEN
                   li_StepCase := 340;
               END_IF;
               
           340: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced AND gtyp_VGR.rotate_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   gtyp_VGR.rotate_Axis.x_Reference := FALSE;
                   li_StepCase := 350;
               END_IF;
               
           350: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 70;
               END_IF;
               
           400: 
               li_Lights := 2;
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_HBW_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               gtyp_VGR.horizontal_Axis.x_Reference  := TRUE;
               gtyp_VGR.vertical_Axis.x_Reference    := TRUE;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced AND NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 410;
               END_IF;
               
           410: 
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_VGR.horizontal_Axis.x_Referenced
                   AND gtyp_VGR.vertical_Axis.x_Referenced
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 420;
               END_IF;
               
           420: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 430;
               END_IF;
               
           430: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_HBW_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 440;
               END_IF;
               
           440: 
               IF gtyp_HBW.x_HBW_Container_Available THEN
                   li_StepCase := 450;
               END_IF;
               
           450: 
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_HBW_Collect_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_Collect_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_Collect_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 460;
               END_IF;
               
           460: 
               QX_VGR_Compressor_Q7 := TRUE;
               gtyp_VGR.x_MPO_Req_Discard := TRUE;
               li_StepCase := 470;
               
           470: 
               QX_VGR_ValveVacuum_Q8 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 480;
               END_IF;
               
           480: 
               
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.x_HBW_PickedUp := TRUE;
                   li_StepCase := 485;
               END_IF;
               
           485: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 490;
               END_IF;
               
           490: 
               
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 495;
               END_IF;
               
           495: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 500;
               END_IF;
               
           500: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_State_activ := TRUE;
                   ls_Target      := 'mpo';
                   gtyp_VGR.x_HBW_PickedUp := FALSE;
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 510;
               END_IF;
               
           510: 
               
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_MPO_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_MPO_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_MPO_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 515;
               END_IF;
               
           515: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_MPO_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_MPO_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_MPO_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_MPO_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_MPO_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 520;
               END_IF;
               
           520: 
               
               IF gtyp_MPO.x_Discard_Ready THEN
                   gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_MPO_vertical;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
                   gtyp_VGR.vertical_Axis.i_PWM := 500;
                   
                   IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_MPO_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                       AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                       AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                       gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                       gtyp_VGR.vertical_Axis.i_PWM := 800;
                       li_StepCase := 530;
                       gtyp_VGR.x_MPO_Req_Discard := FALSE;
                   END_IF;
               END_IF;
               
           530: 
               QX_VGR_ValveVacuum_Q8 := FALSE;
               li_StepCase := 540;
               
           540: 
               QX_VGR_Compressor_Q7 := FALSE;
               gtyp_VGR.x_MPO_Discards := TRUE;
               
               gtyp_VGR.x_Ready_For_Outsource := FALSE;
               gtyp_VGR.x_State_Process       := TRUE;
               gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
               gtyp_Interface_Dashboard.Subscribe.State_Order.s_state := 'IN_PROCESS';
               gtyp_Interface_Dashboard.Subscribe.State_Order.s_type := gtyp_VGR.Workpiece.s_type;
               li_StepCase := 550;
               
           550: 
               
               IF gtyp_MPO.x_MPO_Discards_Accepted THEN
                   gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
                   gtyp_VGR.vertical_Axis.i_PWM := 500;
                   
                   IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                       AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_MPO_vertical - gtyp_VGR.di_Offset_Pos_MPO_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                       AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                       gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                       gtyp_VGR.x_MPO_Discards := FALSE;
                       gtyp_VGR.vertical_Axis.i_PWM := 800;
                       li_StepCase := 560;
                   END_IF;
               END_IF;
               
           560: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 570;
               END_IF;
               
           570: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   gtyp_VGR.x_MPO_Discards := FALSE;
                   li_StepCase := 580;
               END_IF;
               
           580: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   gtyp_VGR.Workpiece.s_id := '0';
                   gtyp_VGR.Workpiece.s_state := '';
                   gtyp_VGR.Workpiece.s_type := '';
                   FOR li_Counter := 1 TO 8 DO
                       gtyp_VGR.History[li_Counter].i_code := 0;
                       gtyp_VGR.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 0;
               END_IF;
           600:
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_DSI_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_DSI_Collect_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_DSI_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSI_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSI_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSI_Collect_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSI_Collect_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSI_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSI_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSI_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSI_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSI_Collect_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSI_Collect_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_DSI_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_DSI_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 610;
               END_IF;
               
           610:
               li_Return_LDT := RD_SYS_T(ldt_MQTT);
               gtyp_VGR.Workpiece.s_state := 'RAW';
               gtyp_VGR.History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
               gtyp_VGR.History[1].i_code := 100;
               li_StepCase := 620;
               
           620:
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 630;
               END_IF;
               
           630:
               QX_VGR_Compressor_Q7 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 640;
               END_IF;
               
           640:
               QX_VGR_ValveVacuum_Q8 := true;
               
               li_StepCase := 650;
               
           650:
               lx_State_activ := TRUE;
               ls_Target      := 'hbw';
               
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 800;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 660;
               END_IF;
               
           660: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 670;
               END_IF;
               
           670: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 680;
               END_IF;
               
           680: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 690;
               END_IF;
               
           690: 
               
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 700;
               END_IF;
               
           700: 
               gtyp_VGR.x_NFC_Start_First := TRUE;
               
               IF gtyp_VGR.x_NFC_Completed THEN
                   gtyp_VGR.x_NFC_Start_First := FALSE;
                   li_StepCase := 710;
               END_IF;
               
           710: 
               
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 800;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 720;
               END_IF;
               
           720: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_Color_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_Color_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
                   
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Color_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Color_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Color_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Color_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Color_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Color_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Color_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Color_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 730;
               END_IF;
               
           730: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 740;
               END_IF;
               
           740: 
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_Color_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
                   
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Color_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Color_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 750;
               END_IF;
               
           750: 
               ls_Color := '';
               
               IF IW_SSC_ColorSensor_A1 >= gtyp_SSC.w_Threshold_Red_Blue THEN
    
                   ls_Color := 'BLUE';
               ELSIF IW_SSC_ColorSensor_A1 <= gtyp_SSC.w_Threshold_White_Red THEN
   
                   ls_Color := 'WHITE';
               ELSIF IW_SSC_ColorSensor_A1 > gtyp_SSC.w_Threshold_White_Red AND IW_SSC_ColorSensor_A1 < gtyp_SSC.w_Threshold_Red_Blue THEN
   
                   ls_Color := 'RED';
               END_IF;
               
               li_Return_LDT := RD_SYS_T(ldt_MQTT);
               gtyp_VGR.History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
               gtyp_VGR.History[2].i_code := 200;
               gtyp_VGR.Workpiece.s_type  := ls_Color;
               
               lx_Start_TON_Wait  := TRUE;
               lt_TON_Wait        := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 760;
               END_IF;
               
           760: 
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
                   
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 770;
               END_IF;
               
           770: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 780;
               END_IF;
               
           780: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 790;
               END_IF;
               
           790: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 800;
               END_IF;
               
           800: 
               
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 810;
               END_IF;
               
           810: 
               
               gtyp_VGR.x_NFC_Start := TRUE;
               
               IF gtyp_VGR.x_NFC_Completed THEN
                   gtyp_VGR.x_NFC_Start := FALSE;
                   li_StepCase := 820;
               END_IF;
               
           820: 
               
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NFC_vertical - gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 830;
               END_IF;
               
           830: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 840;
               END_IF;
               
           840: 
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_HBW_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced AND NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 850;
               END_IF;
               
           850: 
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_VGR.horizontal_Axis.x_Referenced
                   AND gtyp_VGR.vertical_Axis.x_Referenced
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 860;
               END_IF;
               
           860: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 870;
               END_IF;
               
           870: 
               
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_HBW_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 880;
               END_IF;
               
           880: 
               IF gtyp_HBW.x_HBW_Container_Available THEN
                   li_StepCase := 890;
               END_IF;
               
           890: 
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_HBW_Discard_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_HBW_Discard_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_HBW_Discard_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 900;
               END_IF;
               
           900: 
               QX_VGR_ValveVacuum_Q8 := FALSE;
               li_StepCase := 910;
               
           910: 
               QX_VGR_Compressor_Q7 := FALSE;
               gtyp_VGR.x_HBW_Discards := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q AND gtyp_HBW.x_HBW_Discards_Accepted THEN
                   lx_State_activ := FALSE;
                   ls_Target := '';
                   gtyp_VGR.x_HBW_Discards   := FALSE;
                   gtyp_VGR.x_HBW_Storage  := FALSE;
                   lx_Start_TON_Wait                   := FALSE;
                   li_StepCase                := 920;
               END_IF;
               
           920: 
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 930;
               END_IF;
               
           930: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 940;
               END_IF;
               
           940: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 950;
               END_IF;
               
           950: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 960;
               END_IF;
               
           960: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q AND gtyp_HBW.x_HBW_Discards_Accepted THEN
                   gtyp_VGR.x_HBW_Discards  := FALSE;
                   lx_Start_TON_Wait               := FALSE;
                   gtyp_VGR.Workpiece.s_id       := '';
                   gtyp_VGR.Workpiece.s_state    := '';
                   gtyp_VGR.Workpiece.s_type     := '';
                   FOR li_Counter := 1 TO 8 DO
                       
                       gtyp_VGR.History[li_Counter].i_code := 0;
                       gtyp_VGR.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
                   li_StepCase := 0;
               END_IF;
               
           1200:
               gtyp_VGR.Workpiece.s_id := '0';
               gtyp_VGR.Workpiece.s_state := '';
               gtyp_VGR.Workpiece.s_type := '';
               FOR li_Counter := 1 TO 8 DO
                   gtyp_VGR.History[li_Counter].i_code := 0;
                   gtyp_VGR.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
               END_FOR;
               
               IF gtyp_HBW.x_HBW_Container_Available THEN
                   gtyp_VGR.x_HBW_Discards := TRUE;
               END_IF;
               
               IF gtyp_HBW.x_HBW_Discards_Accepted OR gtyp_HBW.x_HBW_PickedUp_Accepted THEN
                   gtyp_VGR.x_HBW_Discards := FALSE;
                   gtyp_VGR.x_HBW_PickedUp := FALSE;
                   gtyp_HBW.x_HBW_Discards_Accepted := FALSE;
                   gtyp_HBW.x_HBW_PickedUp_Accepted := FALSE;
               END_IF;
               
               li_Lights := 2;
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 1210;
               END_IF;
               
           1210: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 1220;
               END_IF;
               
           1220: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 1230;
               END_IF;
               
           1230: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 1240;
               END_IF;
               
           1240: 
               gtyp_VGR.rotate_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.rotate_Axis.x_Referenced THEN
                   li_StepCase := 1250;
               END_IF;
               
           1250: 
               IF gtyp_VGR.rotate_Axis.x_Referenced THEN
                   gtyp_VGR.rotate_Axis.x_Reference := FALSE;
                   li_StepCase := 1260;
               END_IF;
               
           1260: 
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_NiO_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_NiO_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               gtyp_VGR.rotate_Axis.di_Target_Position := gtyp_VGR.di_Pos_NiO_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NiO_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NiO_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NiO_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NiO_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NiO_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NiO_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NiO_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NiO_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NiO_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NiO_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_NiO_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_NiO_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 1270;
               END_IF;
               
           1270: 
               QX_VGR_ValveVacuum_Q8 := FALSE;
               li_StepCase := 1280;
               
           1280: 
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   QX_VGR_Compressor_Q7  := FALSE;
                   lx_Start_TON_Wait               := FALSE;
                   gtyp_VGR.x_Workpiece_NiO := FALSE;
                   gtyp_VGR.x_HBW_Discards := FALSE;
                   li_Lights := 1;
                   li_StepCase            := 0;
               END_IF;
       
       ELSE  
               ;
       END_CASE;
    
   ELSE
       gtyp_VGR.Workpiece.s_id := '';
       gtyp_VGR.Workpiece.s_state := '';
       gtyp_VGR.Workpiece.s_type := '';
       
       gtyp_VGR.x_State_Process := FALSE;
       gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
       gtyp_Interface_Dashboard.Subscribe.State_Order.s_state := 'WAITING_FOR_ORDER';
       gtyp_Interface_Dashboard.Subscribe.State_Order.s_type := '';
       FOR li_Counter := 1 TO 8 DO
           gtyp_VGR.History[li_Counter].i_code := 0;
           gtyp_VGR.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
       END_FOR;
       
       gtyp_VGR.x_Start_Park_Position    := FALSE;
       gtyp_VGR.x_Park_Position_Reached  := FALSE;
       gtyp_VGR.x_NFC_Start_First        := FALSE;
       gtyp_VGR.x_NFC_Start              := FALSE;
       gtyp_VGR.x_NFC_Completed          := FALSE;
       gtyp_VGR.x_HBW_Storage            := FALSE;
       gtyp_VGR.x_HBW_Outsource          := FALSE;
       gtyp_VGR.s_HBW_Outsource_Typ      := '';
       gtyp_VGR.x_HBW_Discards           := FALSE;
       gtyp_VGR.x_HBW_PickedUp           := FALSE;
       gtyp_VGR.x_MPO_Req_Discard        := FALSE;
       gtyp_VGR.x_MPO_Discards           := FALSE;
       gtyp_VGR.x_Ready_For_Outsource    := FALSE;
       gtyp_VGR.x_State_Process          := FALSE;
       gtyp_VGR.x_Workpiece_NiO          := FALSE;
       
       gtyp_VGR.vertical_Axis.i_PWM      := 800;
       
       li_Lights := 1;
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_Order
   VAR 
      lx_Init : Bool;
      li_StepCase : Int;
      lldt_ts_old : LDT;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      lfb_TON_Wait : TON_TIME;
      lx_Start_TON_Wait : Bool;
   END_VAR

   IF lx_Init THEN
       lfb_TON_Wait(IN:= lx_Start_TON_Wait,PT:= T#20s);
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10: 
               IF (gtyp_Interface_Dashboard.Publish.OrderWorkpieceButton.ldt_ts > lldt_ts_old) THEN
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_state := 'ORDERED';
                   gtyp_VGR.s_HBW_Outsource_Typ := gtyp_Interface_Dashboard.Publish.OrderWorkpieceButton.s_type;
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_type := gtyp_VGR.s_HBW_Outsource_Typ;
                   IF gtyp_VGR.x_Ready_For_Outsource THEN
                       lldt_ts_old := gtyp_Interface_Dashboard.Publish.OrderWorkpieceButton.ldt_ts;
                       gtyp_VGR.x_HBW_Outsource := TRUE;
                       li_StepCase := 20;
                   END_IF;
               END_IF;
                   
           20: 
               IF gtyp_VGR.x_HBW_PickedUp OR NOT gtyp_VGR.x_HBW_Outsource THEN
                   gtyp_VGR.x_HBW_Outsource := FALSE;
                   gtyp_VGR.s_HBW_Outsource_Typ := '';
                   li_StepCase := 0;
               END_IF;
               
       
       ELSE  
                   ;
       END_CASE;
    
   ELSE
       lx_Init    := TRUE;
       lldt_ts_old:= DT#1970-01-01-00:00:00.00;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_MPO_Set_Park_Position
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      lfb_TON_Wait : TON_TIME;
      lfb_R_Trig_Start_Park_Pos : R_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Start_Park_Pos(CLK := gtyp_Setup.x_Park_Position
                                  OR IX_Set_Park_Position);
       
       
       IF lfb_R_Trig_Start_Park_Pos.Q THEN
           gtyp_MPO.x_Start_Park_Position := TRUE;
           li_StepCase := 0;
       END_IF;
       
       
       IF NOT gtyp_MPO.x_Start_Park_Position THEN
           li_StepCase := 0;
       END_IF;
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_MPO.x_Start_Park_Position AND NOT gtyp_MPO.x_Park_Position_Reached THEN
                   li_StepCase := 20;
               END_IF;
               
           20: 
               QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
               QX_MPO_M5_VacuumTowardsOven_Q7    := TRUE;
               lx_Start_TON_Wait                  := TRUE;
               lt_TON_Wait                        := T#4000ms;
               
               IF lfb_TON_Wait.Q THEN
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   QX_MPO_M5_VacuumTowardsOven_Q7    := FALSE;
                   lx_Start_TON_Wait                  := FALSE;
                   li_StepCase                        := 30;
               END_IF;
               
           30: 
               QX_MPO_M1_TurnTableClockwise_Q1        := TRUE;
               QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := FALSE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 40;
               END_IF;
               
           40: 
               gtyp_MPO.x_Park_Position_Reached := TRUE;
               
               
               
           ELSE
               ;
       END_CASE;
       
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_HBW_Ablauf
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Fill_HBW : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Time_Error : Bool;
      lt_TON_Wait : Time;
      lx_Start_TON_State : Bool;
      lx_Storage : Bool;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      lldt_Outsource : LDT;
      li_Lights : Int;
      li_Lights_old : Int;
      li_Counter_Hor : Int;
      li_Counter_Ver : Int;
      li_Counter_Act_Hor : Int;
      li_Counter_Act_Ver : Int;
      li_Counter : Int;
      li_StepCase : Int;
      ldi_PosRack_Horizontal : DInt;
      ldi_PosRack_Vertical : DInt;
      ls_Color : String;
      lfb_TON_State : TON_TIME;
      lfb_TON_ConveyerBelt_Out : TON_TIME;
      lfb_TON_Wait : TON_TIME;
      lfb_TON_Fill_HBW : TON_TIME;
      lfb_TON_Error : TON_TIME;
   END_VAR

   IF lx_Init THEN
       IF gtyp_Setup.x_Set_Pos_Activ OR gtyp_HBW.x_Start_Park_Position THEN
           li_StepCase := 0;
       END_IF;
       
       
       lfb_TON_State(IN := NOT lx_Start_TON_State,
                       PT := T#2s);
       
       
       lfb_TON_Error(IN := lx_Time_Error,
                      PT := T#30s);
       
       
       lfb_TON_Fill_HBW(IN := lx_Start_TON_Fill_HBW,
                         PT := T#60s);
       
       IF lfb_TON_Fill_HBW.Q THEN
           lx_Start_TON_Fill_HBW:= FALSE;
       END_IF;
       
       IF lx_Start_TON_Fill_HBW AND (IX_Fill_HBW OR gtyp_Setup.x_Fill_Rack_HBW) THEN
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           
           gtyp_HBW.Rack_Workpiece[1, 1].s_id    := '04c34892186580';
           gtyp_HBW.Rack_Workpiece[1, 1].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[1, 1].s_type  := 'WHITE';
           gtyp_HBW.Rack_History[1, 1].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 1].History[1].i_code := 100;
           gtyp_HBW.Rack_History[1, 1].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 1].History[2].i_code := 200;
           gtyp_HBW.Rack_History[1, 1].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 1].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[1, 2].s_id    := '04c34892186581';
           gtyp_HBW.Rack_Workpiece[1, 2].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[1, 2].s_type  := 'WHITE';
           gtyp_HBW.Rack_History[1, 2].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 2].History[1].i_code := 100;
           gtyp_HBW.Rack_History[1, 2].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 2].History[2].i_code := 200;
           gtyp_HBW.Rack_History[1, 2].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 2].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[1, 3].s_id    := '04c34892186582';
           gtyp_HBW.Rack_Workpiece[1, 3].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[1, 3].s_type  := 'WHITE';
           gtyp_HBW.Rack_History[1, 3].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 3].History[1].i_code := 100;
           gtyp_HBW.Rack_History[1, 3].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 3].History[2].i_code := 200;
           gtyp_HBW.Rack_History[1, 3].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[1, 3].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[2, 1].s_id    := '04c34892186583';
           gtyp_HBW.Rack_Workpiece[2, 1].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[2, 1].s_type  := 'RED';
           gtyp_HBW.Rack_History[2, 1].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 1].History[1].i_code := 100;
           gtyp_HBW.Rack_History[2, 1].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 1].History[2].i_code := 200;
           gtyp_HBW.Rack_History[2, 1].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 1].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[2, 2].s_id    := '04c34892186584';
           gtyp_HBW.Rack_Workpiece[2, 2].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[2, 2].s_type  := 'RED';
           gtyp_HBW.Rack_History[2, 2].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 2].History[1].i_code := 100;
           gtyp_HBW.Rack_History[2, 2].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 2].History[2].i_code := 200;
           gtyp_HBW.Rack_History[2, 2].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 2].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[2, 3].s_id    := '04c34892186585';
           gtyp_HBW.Rack_Workpiece[2, 3].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[2, 3].s_type  := 'RED';
           gtyp_HBW.Rack_History[2, 3].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 3].History[1].i_code := 100;
           gtyp_HBW.Rack_History[2, 3].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 3].History[2].i_code := 200;
           gtyp_HBW.Rack_History[2, 3].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[2, 3].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[3, 1].s_id    := '04c34892186586';
           gtyp_HBW.Rack_Workpiece[3, 1].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[3, 1].s_type  := 'BLUE';
           gtyp_HBW.Rack_History[3, 1].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 1].History[1].i_code := 100;
           gtyp_HBW.Rack_History[3, 1].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 1].History[2].i_code := 200;
           gtyp_HBW.Rack_History[3, 1].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 1].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[3, 2].s_id    := '04c34892186587';
           gtyp_HBW.Rack_Workpiece[3, 2].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[3, 2].s_type  := 'BLUE';
           gtyp_HBW.Rack_History[3, 2].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 2].History[1].i_code := 100;
           gtyp_HBW.Rack_History[3, 2].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 2].History[2].i_code := 200;
           gtyp_HBW.Rack_History[3, 2].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 2].History[3].i_code := 300;
           
           gtyp_HBW.Rack_Workpiece[3, 3].s_id    := '04c34892186588';
           gtyp_HBW.Rack_Workpiece[3, 3].s_state := 'RAW';
           gtyp_HBW.Rack_Workpiece[3, 3].s_type  := 'BLUE';
           gtyp_HBW.Rack_History[3, 3].History[1].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 3].History[1].i_code := 100;
           gtyp_HBW.Rack_History[3, 3].History[2].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 3].History[2].i_code := 200;
           gtyp_HBW.Rack_History[3, 3].History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_HBW.Rack_History[3, 3].History[3].i_code := 300;
           
           lx_Start_TON_Fill_HBW          := FALSE;
           gtyp_Setup.x_Fill_Rack_HBW    := FALSE;
       END_IF;
       
       gtyp_Setup.x_Start_TON_Fill_HBW := lx_Start_TON_Fill_HBW;
       
       
        IF (lfb_TON_State.Q OR (li_Lights <> li_Lights_old)) AND NOT lx_Start_TON_State THEN
           li_Lights_old := li_Lights;
           lx_Start_TON_State := TRUE;
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.Stock_HBW.StockItem := gtyp_HBW.Rack_Workpiece;
           gtyp_Interface_Dashboard.Subscribe.Stock_HBW.ldt_ts := DT_TO_LDT(ldt_MQTT);
           
           gtyp_Interface_Dashboard.Subscribe.State_HBW.ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_HBW.i_code := li_Lights;
           gtyp_Interface_Dashboard.Subscribe.State_HBW.s_description := '';
           gtyp_Interface_Dashboard.Subscribe.State_HBW.s_station := 'hbw';
           gtyp_Interface_Dashboard.Subscribe.State_HBW.s_target := '';
       END_IF;
       
       
       IF NOT lfb_TON_State.Q AND lx_Start_TON_State THEN
           lx_Start_TON_State := FALSE;
       END_IF;
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                       PT := lt_TON_Wait);
         
       
       lfb_TON_ConveyerBelt_Out(IN := NOT IX_HBW_LightBarrierOutside_I3,
                                 PT := T#300ms);
       
       
       
       gtyp_HBW.Rack_Pos[1, 1].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_A1_Horizontal;
       gtyp_HBW.Rack_Pos[2, 1].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_A1_Horizontal;
       gtyp_HBW.Rack_Pos[3, 1].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_A1_Horizontal;
       
       gtyp_HBW.Rack_Pos[1, 2].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_B2_Horizontal;
       gtyp_HBW.Rack_Pos[2, 2].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_B2_Horizontal;
       gtyp_HBW.Rack_Pos[3, 2].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_B2_Horizontal;
       
       gtyp_HBW.Rack_Pos[1, 3].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_C3_Horizontal;
       gtyp_HBW.Rack_Pos[2, 3].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_C3_Horizontal;
       gtyp_HBW.Rack_Pos[3, 3].di_PosRack_Horizontal := gtyp_HBW.di_PosRack_C3_Horizontal;
       
       gtyp_HBW.Rack_Pos[1, 1].di_PosRack_Vertical := gtyp_HBW.di_PosRack_A1_Vertical;
       gtyp_HBW.Rack_Pos[1, 2].di_PosRack_Vertical := gtyp_HBW.di_PosRack_A1_Vertical;
       gtyp_HBW.Rack_Pos[1, 3].di_PosRack_Vertical := gtyp_HBW.di_PosRack_A1_Vertical;
       
       gtyp_HBW.Rack_Pos[2, 1].di_PosRack_Vertical := gtyp_HBW.di_PosRack_B2_Vertical;
       gtyp_HBW.Rack_Pos[2, 2].di_PosRack_Vertical := gtyp_HBW.di_PosRack_B2_Vertical;
       gtyp_HBW.Rack_Pos[2, 3].di_PosRack_Vertical := gtyp_HBW.di_PosRack_B2_Vertical;
       
       gtyp_HBW.Rack_Pos[3, 1].di_PosRack_Vertical := gtyp_HBW.di_PosRack_C3_Vertical;
       gtyp_HBW.Rack_Pos[3, 2].di_PosRack_Vertical := gtyp_HBW.di_PosRack_C3_Vertical;
       gtyp_HBW.Rack_Pos[3, 3].di_PosRack_Vertical := gtyp_HBW.di_PosRack_C3_Vertical;
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               lx_Time_Error := FALSE;
               
               gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
               gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
               gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
               
               IF NOT gtyp_HBW.x_Error AND NOT gtyp_Setup.x_Set_Pos_Activ AND NOT gtyp_HBW.x_Start_Park_Position THEN
                   li_StepCase := 10;
               END_IF;
               
           10:  
               li_Lights := 2;
               IF IX_HBW_SwitchCantileverFront_I5 OR NOT IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := TRUE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
               ELSIF NOT IX_HBW_SwitchCantileverFront_I5 AND IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 20;
               END_IF;
               
           20: 
               
               gtyp_HBW.Horizontal_Axis.x_Reference := TRUE;
               gtyp_HBW.Vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_HBW.Horizontal_Axis.x_Referenced AND NOT gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   li_StepCase := 30;
               END_IF;
               
           30: 
               IF gtyp_HBW.Horizontal_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
               END_IF;
               
               IF gtyp_HBW.Horizontal_Axis.x_Referenced AND gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 40;
               END_IF;
               
           40: 
               
               li_Lights := 1;
               lx_Storage := FALSE;
               
               
               IF gtyp_VGR.x_HBW_Storage THEN
                   li_Lights := 2;
                   li_StepCase := 50;
               
               ELSIF gtyp_VGR.x_HBW_Outsource THEN
                   li_Lights := 2;
                   li_StepCase := 60;
               END_IF;
               
           50: 
               FOR li_Counter_Hor := 1 TO 3 DO
                   FOR li_Counter_Ver := 1 TO 3 DO
                       IF gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_id = '0' THEN
                           li_Counter_Act_Hor := li_Counter_Hor;
                           li_Counter_Act_Ver := li_Counter_Ver;
                           ldi_PosRack_Horizontal := gtyp_HBW.Rack_Pos[li_Counter_Ver, li_Counter_Hor].di_PosRack_Horizontal;
                           ldi_PosRack_Vertical := gtyp_HBW.Rack_Pos[li_Counter_Ver, li_Counter_Hor].di_PosRack_Vertical;
                           li_StepCase := 70;
                       END_IF;
                       IF li_StepCase = 70 THEN
                           EXIT;
                       END_IF;
                   END_FOR;
                   IF li_StepCase = 70 THEN
                       EXIT;
                   END_IF;
               END_FOR;
               
           60: 
               li_Return_LDT := RD_SYS_T(ldt_MQTT);
               lldt_Outsource := ldt_MQTT;
               
               FOR li_Counter_Hor := 1 TO 3 DO
                   FOR li_Counter_Ver := 1 TO 3 DO
                       IF (gtyp_VGR.s_HBW_Outsource_Typ = gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_type)
                           AND (lldt_Outsource > gtyp_HBW.Rack_History[li_Counter_Ver, li_Counter_Hor].History[3].ldt_ts)
                           AND NOT (gtyp_HBW.Rack_History[li_Counter_Ver, li_Counter_Hor].History[3].ldt_ts = DT#1970-01-01-00:00:00.00) THEN
                           lldt_Outsource := gtyp_HBW.Rack_History[li_Counter_Ver, li_Counter_Hor].History[3].ldt_ts;
                           li_Counter_Act_Hor := li_Counter_Hor;
                           li_Counter_Act_Ver := li_Counter_Ver;
                           ldi_PosRack_Horizontal := gtyp_HBW.Rack_Pos[li_Counter_Ver, li_Counter_Hor].di_PosRack_Horizontal;
                           ldi_PosRack_Vertical := gtyp_HBW.Rack_Pos[li_Counter_Ver, li_Counter_Hor].di_PosRack_Vertical;
                       END_IF;
                   END_FOR;
               END_FOR;
               
               IF (li_Counter_Act_Hor = 4) OR (li_Counter_Act_Ver = 4) THEN
                   li_StepCase := 40;
               ELSE
                   li_StepCase := 70;
               END_IF;
               
           70: 
               gtyp_HBW.Horizontal_Axis.di_Target_Position := ldi_PosRack_Horizontal;
               gtyp_HBW.Horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_HBW.Vertical_Axis.di_Target_Position := ldi_PosRack_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (ldi_PosRack_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (ldi_PosRack_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_PosRack_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_PosRack_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (ldi_PosRack_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (ldi_PosRack_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_PosRack_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_PosRack_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80: 
               
               QX_HBW_M4_CantileverBackward_Q8 := FALSE;
               QX_HBW_M4_CantileverForward_Q7 := TRUE;
               
               IF IX_HBW_SwitchCantileverFront_I5 AND NOT IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           90: 
               gtyp_HBW.Vertical_Axis.di_Target_Position := ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 100;
               END_IF;
               
           100: 
               
               QX_HBW_M4_CantileverBackward_Q8 := TRUE;
               QX_HBW_M4_CantileverForward_Q7 := FALSE;
               
               IF NOT IX_HBW_SwitchCantileverFront_I5 AND IX_HBW_SwitchCantileverBack_I6 THEN
                   IF gtyp_VGR.x_HBW_Storage THEN
                       gtyp_HBW.Rack_Workpiece[li_Counter_Act_Ver, li_Counter_Act_Hor].s_id := '';
                   ELSIF gtyp_VGR.x_HBW_Outsource THEN
                       gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := TRUE;
                       gtyp_HBW.History := gtyp_HBW.Rack_History[li_Counter_Act_Ver, li_Counter_Act_Hor].History;
                       gtyp_HBW.Workpiece := gtyp_HBW.Rack_Workpiece[li_Counter_Act_Ver, li_Counter_Act_Hor];
                       li_Return_LDT := RD_SYS_T(ldt_MQTT);
                       gtyp_HBW.History[4].i_code := 400;
                       gtyp_HBW.History[4].ldt_ts := DT_TO_LDT(ldt_MQTT);
                       
                       gtyp_HBW.Rack_Workpiece[li_Counter_Act_Ver, li_Counter_Act_Hor].s_id := '';
                       gtyp_HBW.Rack_Workpiece[li_Counter_Act_Ver, li_Counter_Act_Hor].s_state := '';
                       gtyp_HBW.Rack_Workpiece[li_Counter_Act_Ver, li_Counter_Act_Hor].s_type := '';
                       FOR li_Counter := 1 TO 8 DO
                           gtyp_HBW.Rack_History[li_Counter_Act_Ver, li_Counter_Act_Hor].History[li_Counter].i_code := 0;
                           gtyp_HBW.Rack_History[li_Counter_Act_Ver, li_Counter_Act_Hor].History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                       END_FOR;
                   END_IF;
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 110;
               END_IF;
               
           110: 
               
               gtyp_HBW.Horizontal_Axis.x_Reference := TRUE;
               
               gtyp_HBW.Vertical_Axis.di_Target_Position := gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF NOT gtyp_HBW.Horizontal_Axis.x_Referenced THEN
                   li_StepCase := 120;
               END_IF;
               
           120: 
               
               IF gtyp_HBW.Horizontal_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF gtyp_HBW.Horizontal_Axis.x_Referenced
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached  THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 130;
               END_IF;
               
           130: 
               gtyp_HBW.Horizontal_Axis.di_Target_Position := gtyp_HBW.di_PosBelt_Horizontal;
               gtyp_HBW.Horizontal_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 140;
               END_IF;
               
           140: 
               
               QX_HBW_M4_CantileverBackward_Q8 := FALSE;
               QX_HBW_M4_CantileverForward_Q7 := TRUE;
               
               lx_Time_Error := TRUE;
               
               IF IX_HBW_SwitchCantileverFront_I5 AND NOT IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8   := FALSE;
                   QX_HBW_M4_CantileverForward_Q7    := FALSE;
                   lx_Time_Error                      := FALSE;
                   li_StepCase := 150;
               END_IF;
               
               
               IF lfb_TON_Error.Q THEN
                   li_Lights := 4;
                   lx_Time_Error := FALSE;
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := FALSE;
                   QX_HBW_M1_ConveyorBeltForward_Q1 := FALSE;
                   gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := FALSE;
                   gtyp_HBW.x_Error := TRUE;
                   li_StepCase := 0;
               END_IF;
               
           150: 
               gtyp_HBW.Vertical_Axis.di_Target_Position := gtyp_HBW.di_PosBelt_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 160;
               END_IF;
               
           160: 
               
               lx_Time_Error := TRUE;
               
               IF NOT IX_HBW_LightBarrierInside_I2 THEN
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := FALSE;
                   QX_HBW_M1_ConveyorBeltForward_Q1  := TRUE;
                   lx_Time_Error                      := FALSE;
                   li_StepCase                        := 170;
               END_IF;
               
               
               IF lfb_TON_Error.Q THEN
                   li_Lights := 4;
                   lx_Time_Error := FALSE;
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := FALSE;
                   QX_HBW_M1_ConveyorBeltForward_Q1 := FALSE;
                   gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := FALSE;
                   gtyp_HBW.x_Error := TRUE;
                   li_StepCase := 0;
               END_IF;
               
           170: 
               
               lx_Time_Error := TRUE;
               
               IF lfb_TON_ConveyerBelt_Out.Q THEN
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := FALSE;
                   QX_HBW_M1_ConveyorBeltForward_Q1 := FALSE;
                   gtyp_HBW.x_HBW_Container_Available := TRUE;
                   lx_Time_Error := FALSE;
                   li_StepCase := 180;
               END_IF;
               
               
               IF lfb_TON_Error.Q THEN
                   li_Lights := 4;
                   lx_Time_Error := FALSE;
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := FALSE;
                   QX_HBW_M1_ConveyorBeltForward_Q1 := FALSE;
                   gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := FALSE;
                   gtyp_HBW.x_Error := TRUE;
                   li_StepCase := 0;
               END_IF;
               
           180: 
               
               li_Lights := 1;
               
               IF gtyp_VGR.x_HBW_PickedUp AND gtyp_VGR.x_HBW_Outsource THEN
                   gtyp_VGR.Workpiece := gtyp_HBW.Workpiece;
                   gtyp_VGR.History   := gtyp_HBW.History;
                   gtyp_HBW.Workpiece.s_id := '0';
                   gtyp_HBW.Workpiece.s_state := '';
                   gtyp_HBW.Workpiece.s_type := '';
                   FOR li_Counter := 1 TO 8 DO
                       gtyp_HBW.History[li_Counter].i_code := 0;
                       gtyp_HBW.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
                   gtyp_HBW.x_HBW_Container_Available := FALSE;
                   gtyp_HBW.x_HBW_PickedUp_Accepted := TRUE;
                   
                   gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := FALSE;
                   
                   li_Lights := 2;
                   li_StepCase := 190;
               
               ELSIF gtyp_VGR.x_HBW_Discards AND gtyp_VGR.x_HBW_Storage THEN
                   gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := TRUE;
                   gtyp_HBW.Workpiece := gtyp_VGR.Workpiece;
                   gtyp_HBW.History:= gtyp_VGR.History;
                   gtyp_HBW.x_HBW_Container_Available := FALSE;
                   gtyp_HBW.x_HBW_Discards_Accepted := TRUE;
                   lx_Storage := true;
                   
                   li_Lights := 2;
                   li_StepCase := 190;
               END_IF;
               
           190: 
               
               IF NOT gtyp_VGR.x_HBW_Discards AND NOT gtyp_VGR.x_HBW_PickedUp THEN
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := TRUE;
                   QX_HBW_M1_ConveyorBeltForward_Q1 := FALSE;
                   li_StepCase := 200;
               END_IF;
               
           200:  
               
               lx_Time_Error := TRUE;
               
               IF NOT IX_HBW_LightBarrierInside_I2 THEN
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := FALSE;
                   QX_HBW_M1_ConveyorBeltForward_Q1  := FALSE;
                   lx_Time_Error                      := FALSE;
                   li_StepCase                        := 210;
               END_IF;
               
               
               IF lfb_TON_Error.Q THEN
                   li_Lights := 4;
                   lx_Time_Error := FALSE;
                   QX_HBW_M1_ConveyorBeltBackward_Q2 := FALSE;
                   QX_HBW_M1_ConveyorBeltForward_Q1 := FALSE;
                   gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := FALSE;
                   gtyp_HBW.x_Error := TRUE;
                   li_StepCase := 0;
               END_IF;
               
           210: 
               
               gtyp_HBW.Vertical_Axis.di_Target_Position := gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (gtyp_HBW.di_PosBelt_Vertical - gtyp_HBW.di_Offset_Pos_Belt_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 220;
               END_IF;
               
           220: 
               QX_HBW_M4_CantileverBackward_Q8 := TRUE;
               QX_HBW_M4_CantileverForward_Q7 := FALSE;
               
               IF NOT IX_HBW_SwitchCantileverFront_I5 AND IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 230;
               END_IF;
               
           230: 
               gtyp_HBW.Horizontal_Axis.di_Target_Position := ldi_PosRack_Horizontal;
               gtyp_HBW.Horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_HBW.Vertical_Axis.di_Target_Position := ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (ldi_PosRack_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (ldi_PosRack_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (ldi_PosRack_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (ldi_PosRack_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_PosRack_Vertical - gtyp_HBW.di_Offset_Pos_Rack_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 240;
               END_IF;
               
           240: 
               
               QX_HBW_M4_CantileverBackward_Q8 := FALSE;
               QX_HBW_M4_CantileverForward_Q7 := TRUE;
               
               IF IX_HBW_SwitchCantileverFront_I5 AND NOT IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 250;
               END_IF;
               
           250: 
               gtyp_HBW.Vertical_Axis.di_Target_Position := ldi_PosRack_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_PosRack_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_PosRack_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   IF lx_Storage THEN
                       li_Return_LDT := RD_SYS_T(ldt_MQTT);
                       gtyp_HBW.History[3].i_code := 300;
                       gtyp_HBW.History[3].ldt_ts := DT_TO_LDT(ldt_MQTT);
                       gtyp_HBW.Rack_Workpiece[li_Counter_Act_Ver, li_Counter_Act_Hor] := gtyp_HBW.Workpiece;
                       gtyp_HBW.Rack_History[li_Counter_Act_Ver, li_Counter_Act_Hor].History := gtyp_HBW.History;
                       gtyp_Interface_Dashboard.Subscribe.State_HBW.x_active := FALSE;
                   ELSE
                       gtyp_HBW.Rack_Workpiece[li_Counter_Act_Ver, li_Counter_Act_Hor].s_id := '0';
                   END_IF;
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 260;
               END_IF;
               
           260: 
               
               QX_HBW_M4_CantileverBackward_Q8 := TRUE;
               QX_HBW_M4_CantileverForward_Q7 := FALSE;
               
               IF NOT IX_HBW_SwitchCantileverFront_I5 AND IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 0;
                   lx_Storage := FALSE;
               END_IF;
       
       ELSE  
           ;
       END_CASE;
       
       
       IF gtyp_Setup.x_Clean_Rack_HBW THEN
           FOR li_Counter_Hor := 1 TO 3 DO
               FOR li_Counter_Ver := 1 TO 3 DO
                   gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_id := '0';
                   gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_state := '';
                   gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_type := '';
                   FOR li_Counter := 1 TO 8 DO
                       gtyp_HBW.Rack_History[li_Counter_Ver, li_Counter_Hor].History[li_Counter].i_code := 0;
                       gtyp_HBW.Rack_History[li_Counter_Ver, li_Counter_Hor].History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
               END_FOR;
           END_FOR;
           gtyp_Setup.x_Clean_Rack_HBW := FALSE;
       END_IF;
       
       
       QW_HBW_PWM_ConveyorBelt_M1   := gtyp_HBW.i_PWM_ConveyorBelt;
       QW_HBW_PWM_Cantilever_M4     := gtyp_HBW.i_PWM_Cantilever;
   ELSE
       FOR li_Counter_Hor := 1 TO 3 DO
           FOR li_Counter_Ver := 1 TO 3 DO
               IF gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_id = '' THEN
                   gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_id := '0';
                   gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_state := '';
                   gtyp_HBW.Rack_Workpiece[li_Counter_Ver, li_Counter_Hor].s_type := '';
                   FOR li_Counter := 1 TO 8 DO
                       gtyp_HBW.Rack_History[li_Counter_Ver, li_Counter_Hor].History[li_Counter].i_code := 0;
                       gtyp_HBW.Rack_History[li_Counter_Ver, li_Counter_Hor].History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
               END_IF;
           END_FOR;
       END_FOR;
       
       gtyp_HBW.x_Start_Park_Position := FALSE;
       gtyp_HBW.x_Park_Position_Reached := FALSE;
       gtyp_HBW.x_HBW_PickedUp_Accepted := FALSE;
       gtyp_HBW.x_HBW_Discards_Accepted := FALSE;
       gtyp_HBW.x_HBW_PickUp_Ready := FALSE;
       gtyp_HBW.x_HBW_Container_Available := FALSE;
       gtyp_HBW.x_Error := FALSE;
       
       li_Lights              := 1;
       lx_Start_TON_Fill_HBW  := TRUE;
       lx_Init                := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_VGR_Axis_rotate
   VAR 
      lx_Init : Bool;
      lfb_rotate_Axis : FB_Axis;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_rotate_Axis(ini_Axis           := 3,
                   indi_Increment          := gtyp_VGR.rotate_Axis.di_Increment,
                   inx_Ref_Switch          := IX_VGR_RefSwitchRotate_I3,
                   inx_Referencing         := gtyp_VGR.rotate_Axis.x_Reference,
                   inx_Start_Positioning   := gtyp_VGR.rotate_Axis.x_Start_Positioning,
                   indi_Target_Position    := gtyp_VGR.rotate_Axis.di_Target_Position,
                   ini_PWM                 := gtyp_VGR.rotate_Axis.i_PWM,
                   inouttyp_Config         := gtyp_VGR.rotate_Axis.Config,
                   inouttyp_Setup          := gtyp_SetupAxis);
       
       QX_VGR_M3_RotateClockwise_Q5          := lfb_rotate_Axis.outx_Motor_Neg;
       QX_VGR_M3_RotateCounterclockwise_Q6   := lfb_rotate_Axis.outx_Motor_Pos;
       QW_VGR_PWM_Rotate_M3                  := lfb_rotate_Axis.outi_Motor_PWM;
       gtyp_VGR.rotate_Axis.di_Actual_Position := lfb_rotate_Axis.outdi_Actual_Position;
       gtyp_VGR.rotate_Axis.x_Referenced       := lfb_rotate_Axis.outx_Referenced;
       gtyp_VGR.rotate_Axis.x_Position_Reached := lfb_rotate_Axis.outx_Position_Reached;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SSC_Calibration_Color
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Start_Positioning_m : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      ldi_Pos_Horizontal : DInt;
      ldi_Pos_Vertical : DInt;
      lfb_R_Trig_Deaktivate : R_TRIG;
      lfb_TON_Wait : TON_TIME;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Deaktivate(CLK:= NOT gtyp_Setup.x_Color_Sensor_Calibration
                              OR NOT (gtyp_Setup.i_Color_Sensor_Selection = 1));
       
       IF lfb_R_Trig_Deaktivate.Q THEN
           gtyp_Setup.x_Calculate_Value_Color := FALSE;
           gtyp_Setup.x_Set_Calib_Value_Color_Blue := FALSE;
           gtyp_Setup.x_Set_Calib_Value_Color_Red := FALSE;
           gtyp_Setup.x_Set_Calib_Value_Color_White := FALSE;
           gtyp_Setup.w_Calib_ColorValue_Blue := 0;
           gtyp_Setup.w_Calib_ColorValue_Red := 0;
           gtyp_Setup.w_Calib_ColorValue_White := 0;
           gtyp_Setup.w_Threshold_Red_Blue := 0;
           gtyp_Setup.w_Threshold_White_Red := 0;
           li_StepCase            := 0;
       END_IF;
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_Setup.x_Color_Sensor_Calibration
                   AND (gtyp_Setup.i_Color_Sensor_Selection = 1) THEN
                   gtyp_Setup.x_Calculate_Value_Color := FALSE;
                   gtyp_Setup.x_Set_Calib_Value_Color_Blue := FALSE;
                   gtyp_Setup.x_Set_Calib_Value_Color_Red := FALSE;
                   gtyp_Setup.x_Set_Calib_Value_Color_White := FALSE;
                   gtyp_Setup.w_Calib_ColorValue_Blue := 0;
                   gtyp_Setup.w_Calib_ColorValue_Red := 0;
                   gtyp_Setup.w_Calib_ColorValue_White := 0;
                   gtyp_Setup.w_Threshold_Red_Blue := 0;
                   gtyp_Setup.w_Threshold_White_Red := 0;
                   li_StepCase := 20;
               END_IF;
               
           20: 
               
               
               IF gtyp_Setup.x_Set_Calib_Value_Color_Blue THEN
                   gtyp_Setup.w_Calib_ColorValue_Blue := IW_SSC_ColorSensor_A1;
                   gtyp_Setup.x_Set_Calib_Value_Color_Blue := FALSE;
               ELSIF gtyp_Setup.x_Set_Calib_Value_Color_Red THEN
                   gtyp_Setup.w_Calib_ColorValue_Red := IW_SSC_ColorSensor_A1;
                   gtyp_Setup.x_Set_Calib_Value_Color_Red := FALSE;
               ELSIF gtyp_Setup.x_Set_Calib_Value_Color_White THEN
                   gtyp_Setup.w_Calib_ColorValue_White := IW_SSC_ColorSensor_A1;
                   gtyp_Setup.x_Set_Calib_Value_Color_White := FALSE;
               END_IF;
               
               gtyp_Setup.w_Threshold_White_Red  := gtyp_Setup.w_Calib_ColorValue_White + ((gtyp_Setup.w_Calib_ColorValue_Red - gtyp_Setup.w_Calib_ColorValue_White) / 2);
               gtyp_Setup.w_Threshold_Red_Blue   := gtyp_Setup.w_Calib_ColorValue_Red + ((gtyp_Setup.w_Calib_ColorValue_Blue - gtyp_Setup.w_Calib_ColorValue_Red) / 2);
               
               IF gtyp_Setup.x_Calculate_Value_Color THEN
                   gtyp_SSC.w_Threshold_White_Red := gtyp_Setup.w_Threshold_White_Red;
                   gtyp_SSC.w_Threshold_Red_Blue := gtyp_Setup.w_Threshold_Red_Blue;
                   gtyp_Setup.x_Calculate_Value_Color := FALSE;
               END_IF;
               
               
           ELSE
               ;
       END_CASE;
       
       IF (gtyp_Setup.i_Color_Sensor_Selection = 1) THEN
           
           gtyp_Setup.w_Actual_ColorValue := IW_SSC_ColorSensor_A1;
       END_IF;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_VGR_Axis_horizontal
   VAR 
      lx_Init : Bool;
      lfb_horizontal_Axis : FB_Axis;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_horizontal_Axis(ini_Axis       := 1,
                   indi_Increment          := gtyp_VGR.horizontal_Axis.di_Increment,
                   inx_Ref_Switch          := IX_VGR_RefSwitchHorizontalAxis_I2,
                   inx_Referencing         := gtyp_VGR.horizontal_Axis.x_Reference,
                   inx_Start_Positioning   := gtyp_VGR.horizontal_Axis.x_Start_Positioning,
                   indi_Target_Position    := gtyp_VGR.horizontal_Axis.di_Target_Position,
                   ini_PWM                 := gtyp_VGR.horizontal_Axis.i_PWM,
                   inouttyp_Config         := gtyp_VGR.horizontal_Axis.Config,
                   inouttyp_Setup          := gtyp_SetupAxis);
       
       QX_VGR_M2_HorizontalAxisForward_Q4    := lfb_horizontal_Axis.outx_Motor_Pos;
       QX_VGR_M2_HorizontalAxisBackward_Q3   := lfb_horizontal_Axis.outx_Motor_Neg;
       QW_VGR_PWM_Horizontal_M2              := lfb_horizontal_Axis.outi_Motor_PWM;
       gtyp_VGR.horizontal_Axis.di_Actual_Position    := lfb_horizontal_Axis.outdi_Actual_Position;
       gtyp_VGR.horizontal_Axis.x_Referenced          := lfb_horizontal_Axis.outx_Referenced;
       gtyp_VGR.horizontal_Axis.x_Position_Reached    := lfb_horizontal_Axis.outx_Position_Reached;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_MPO_Ablauf
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Time_Error : Bool;
      lt_TON_Wait : Time;
      lx_Start_TON_State : Bool;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      li_StepCase : Int;
      li_Lights : Int;
      li_Lights_old : Int;
      li_Counter : Int;
      lfb_blinker : FB_Blinker;
      lfb_TOF_ConveyerBelt_Out : TOF_TIME;
      lfb_TON_Wait : TON_TIME;
      lfb_TON_Error : TON_TIME;
      lfb_TON_State : TON_TIME;
      lfb_F_Trig_ConveyerBelt : F_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_State(IN := NOT lx_Start_TON_State,
                       PT := T#2s);
       
       
       lfb_TON_Error(IN := lx_Time_Error,
                      PT := T#30s);
       
       
       IF (lfb_TON_State.Q OR (li_Lights <> li_Lights_old)) AND NOT lx_Start_TON_State THEN
           li_Lights_old := li_Lights;
           lx_Start_TON_State := TRUE;
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_MPO.ldt_ts        := DT_TO_LDT(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_MPO.i_code        := li_Lights;
           gtyp_Interface_Dashboard.Subscribe.State_MPO.s_description := '';
           gtyp_Interface_Dashboard.Subscribe.State_MPO.s_station     := 'mpo';
           gtyp_Interface_Dashboard.Subscribe.State_MPO.s_target      := '';
       END_IF;
       
       
       IF NOT lfb_TON_State.Q AND lx_Start_TON_State THEN
           lx_Start_TON_State := FALSE;
       END_IF;
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                       PT := lt_TON_Wait);
         
      
      lfb_F_Trig_ConveyerBelt(CLK := NOT IX_MPO_LightBarrierEndOfConBelt_I3);
       
       
      lfb_TOF_ConveyerBelt_Out(IN:= lfb_F_Trig_ConveyerBelt.Q,
                                PT:= T#5000ms);
      
       
       lfb_blinker(int_periodendauer:= T#1000ms);
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               lx_Time_Error := FALSE;
               
               IF NOT gtyp_MPO.x_Error AND NOT gtyp_MPO.x_Start_Park_Position THEN
                   li_StepCase := 10;
               END_IF;
               
           10: 
               li_Lights := 2;
               QX_MPO_LightOven_Q9   := FALSE;
               QX_MPO_Compressor_Q10 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 20;
               END_IF;
               
           20:  
               QX_MPO_ValveOvenDoor_Q13 := TRUE;
               QX_MPO_ValveLowering_Q12 := FALSE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 30;
               END_IF;
               
           30: 
               IF IX_MPO_RefSwitchOvenFeederOutside_I7 OR NOT IX_MPO_RefSwitchOvenFeederInside_I6 THEN
                   QX_MPO_M4_OvenFeederRetract_Q5 := TRUE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
               ELSIF NOT IX_MPO_RefSwitchOvenFeederOutside_I7 AND IX_MPO_RefSwitchOvenFeederInside_I6 THEN
                   QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
                   li_StepCase := 40;
               END_IF;
               
           40:  
               
               QX_MPO_ValveOvenDoor_Q13 := FALSE;
               
               QX_MPO_M5_VacuumTowardsTurnTable_Q8 := TRUE;
               QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
               QX_MPO_ValveVacuum_Q11        := FALSE;
               
               IF IX_MPO_RefSwitchVac_PosOven_I8 OR NOT IX_MPO_RefSwitchVac_PosTurnTable_I5 THEN
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := TRUE;
                   QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
               ELSIF NOT IX_MPO_RefSwitchVac_PosOven_I8 AND IX_MPO_RefSwitchVac_PosTurnTable_I5 THEN
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
                   li_StepCase := 50;
               END_IF
               ;
               
           50: 
               QX_MPO_M3_Saw_Q4 := FALSE;
               QX_MPO_ValveFeeder_Q14 := FALSE;
               QX_MPO_M2_ConveyorBeltForward_Q3 := FALSE;
               
               IF IX_MPO_RefSwitchTurnTable_PosSaw_I4 OR IX_MPO_RefSwitchTurnTable_PosBelt_I2 OR NOT IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := FALSE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := TRUE;
               ELSIF NOT IX_MPO_RefSwitchTurnTable_PosSaw_I4 AND NOT IX_MPO_RefSwitchTurnTable_PosBelt_I2 AND IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := FALSE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
                   QX_MPO_Compressor_Q10 := FALSE;
                   li_StepCase := 60;
               END_IF;
               
           60: 
               li_Lights := 1;
               IF gtyp_VGR.x_MPO_Req_Discard THEN
                   li_Lights := 2;
                   QX_MPO_Compressor_Q10 := TRUE;
                   li_StepCase := 70;
               END_IF;
               
           70: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80: 
               QX_MPO_ValveOvenDoor_Q13 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           90: 
               QX_MPO_M4_OvenFeederRetract_Q5    := FALSE;
               QX_MPO_M4_OvenFeederExtend_Q6     := TRUE;
               
               IF IX_MPO_RefSwitchOvenFeederOutside_I7 AND NOT IX_MPO_RefSwitchOvenFeederInside_I6 THEN
                   QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
                   gtyp_MPO.x_MPO_Discards_Accepted := FALSE;
                   gtyp_MPO.x_Discard_Ready      := TRUE;
                   li_StepCase := 100;
               END_IF;
               
           100: 
               
               lx_Time_Error := TRUE;
               
               IF gtyp_VGR.x_MPO_Discards AND NOT IX_MPO_LightBarrierOven_I9 THEN
                   gtyp_Interface_Dashboard.Subscribe.State_MPO.x_active := TRUE;
                   gtyp_MPO.History  := gtyp_VGR.History;
                   gtyp_MPO.Workpiece := gtyp_VGR.Workpiece;
                   gtyp_MPO.x_Discard_Ready := FALSE;
                   gtyp_MPO.x_MPO_Discards_Accepted := TRUE;
                   lx_Time_Error := FALSE;
                   li_StepCase := 105;
               END_IF;
               
               
               IF lfb_TON_Error.Q THEN
                   li_Lights := 4;
                   lx_Time_Error := FALSE;
                   gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_state := 'WAITING_FOR_ORDER';
                   gtyp_Interface_Dashboard.Subscribe.State_Order.s_type := '';
                   gtyp_Interface_Dashboard.Subscribe.State_MPO.x_active := FALSE;
                   gtyp_MPO.x_Discard_Ready := FALSE;
                   gtyp_MPO.x_MPO_Discards_Accepted := FALSE;
                   gtyp_MPO.x_Error := TRUE;
                   li_StepCase := 0;
               END_IF;
               
           105: 
               IF NOT gtyp_VGR.x_MPO_Discards AND IX_MPO_RefSwitchOvenFeederOutside_I7 AND NOT IX_MPO_RefSwitchOvenFeederInside_I6 THEN
                   gtyp_MPO.x_MPO_Discards_Accepted := FALSE;
                   QX_MPO_M4_OvenFeederRetract_Q5 := TRUE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
                   li_StepCase := 110;
               END_IF;
               
           110: 
               IF NOT IX_MPO_RefSwitchOvenFeederOutside_I7 AND IX_MPO_RefSwitchOvenFeederInside_I6 THEN
                   QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
                   li_StepCase := 120;
               END_IF;
               
           120: 
               QX_MPO_ValveOvenDoor_Q13 := FALSE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 130;
               END_IF;
               
           130: 
               QX_MPO_LightOven_Q9:= lfb_blinker.outx_blinker;
               
               IF NOT gtyp_VGR.x_MPO_Discards THEN
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   gtyp_MPO.History[5].i_code := 500;
                   gtyp_MPO.History[5].ldt_ts := DT_TO_LDT(ldt_MQTT);
                   
                   QX_MPO_M5_VacuumTowardsOven_Q7 := TRUE;
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   
                   IF NOT IX_MPO_RefSwitchVac_PosTurnTable_I5 AND IX_MPO_RefSwitchVac_PosOven_I8 THEN
                       QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
                       QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   END_IF;
               END_IF;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#4000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 140;
               END_IF;
               
           140: 
               QX_MPO_LightOven_Q9       := FALSE;
               QX_MPO_ValveOvenDoor_Q13  := TRUE;
               
               IF NOT gtyp_VGR.x_MPO_Discards THEN
                   QX_MPO_M5_VacuumTowardsOven_Q7 := TRUE;
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   
                   IF NOT IX_MPO_RefSwitchVac_PosTurnTable_I5 AND IX_MPO_RefSwitchVac_PosOven_I8 THEN
                       QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
                       QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   END_IF;
               END_IF;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 150;
               END_IF;
               
           150: 
               
               QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
               QX_MPO_M4_OvenFeederExtend_Q6 := TRUE;
               
               IF NOT gtyp_VGR.x_MPO_Discards THEN
                   QX_MPO_M5_VacuumTowardsOven_Q7 := TRUE;
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   
                   IF NOT IX_MPO_RefSwitchVac_PosTurnTable_I5 AND IX_MPO_RefSwitchVac_PosOven_I8 THEN
                       QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
                       QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   END_IF;
               END_IF;
               
               IF IX_MPO_RefSwitchOvenFeederOutside_I7 AND NOT IX_MPO_RefSwitchOvenFeederInside_I6 THEN
                   QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
               END_IF;
               
               IF IX_MPO_RefSwitchOvenFeederOutside_I7 AND NOT IX_MPO_RefSwitchOvenFeederInside_I6
                   AND NOT IX_MPO_RefSwitchVac_PosTurnTable_I5 AND IX_MPO_RefSwitchVac_PosOven_I8 THEN
                   QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
                   li_StepCase := 160;
               END_IF;
               
           160: 
               QX_MPO_ValveLowering_Q12:= TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 170;
               END_IF;
               
           170: 
               QX_MPO_ValveVacuum_Q11:= TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 180;
               END_IF;
               
           180: 
               QX_MPO_ValveLowering_Q12 := FALSE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 190;
               END_IF;
               
           190: 
               QX_MPO_M4_OvenFeederRetract_Q5 := TRUE;
               QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
               QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
               QX_MPO_M5_VacuumTowardsTurnTable_Q8 := TRUE;
               
               IF IX_MPO_RefSwitchVac_PosTurnTable_I5 AND NOT IX_MPO_RefSwitchVac_PosOven_I8 THEN
                   QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
               END_IF;
               
               IF NOT IX_MPO_RefSwitchOvenFeederOutside_I7 AND IX_MPO_RefSwitchOvenFeederInside_I6 THEN
                   QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
               END_IF;
               
               IF NOT IX_MPO_RefSwitchOvenFeederOutside_I7 AND IX_MPO_RefSwitchOvenFeederInside_I6
                   AND IX_MPO_RefSwitchVac_PosTurnTable_I5 AND NOT IX_MPO_RefSwitchVac_PosOven_I8 THEN
                   QX_MPO_M5_VacuumTowardsOven_Q7 := FALSE;
                   QX_MPO_M5_VacuumTowardsTurnTable_Q8 := FALSE;
                   QX_MPO_M4_OvenFeederRetract_Q5 := FALSE;
                   QX_MPO_M4_OvenFeederExtend_Q6 := FALSE;
                   QX_MPO_ValveOvenDoor_Q13 := FALSE;
                   li_StepCase := 200;
               END_IF;
               
           200: 
               IF IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_ValveLowering_Q12 := TRUE;
                   
                   lx_Start_TON_Wait := TRUE;
                   lt_TON_Wait := T#2000ms;
                   
                   IF lfb_TON_Wait.Q THEN
                       lx_Start_TON_Wait := FALSE;
                       li_StepCase := 210;
                   END_IF;
               END_IF;
               
           210: 
               QX_MPO_ValveVacuum_Q11 := FALSE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 220;
               END_IF;
               
           220: 
               QX_MPO_ValveLowering_Q12 := FALSE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 230;
               END_IF;
               
           230: 
               IF NOT IX_MPO_RefSwitchTurnTable_PosSaw_I4 AND NOT IX_MPO_RefSwitchTurnTable_PosBelt_I2 AND IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := TRUE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
               ELSIF IX_MPO_RefSwitchTurnTable_PosSaw_I4 OR IX_MPO_RefSwitchTurnTable_PosBelt_I2 AND NOT IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := FALSE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
                   li_StepCase := 240;
               END_IF;
               
           240: 
               QX_MPO_M3_Saw_Q4 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#4000ms;
               
               IF lfb_TON_Wait.Q THEN
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   gtyp_MPO.History[6].i_code := 600;
                   gtyp_MPO.History[6].ldt_ts := DT_TO_LDT(ldt_MQTT);
                   
                   lx_Start_TON_Wait := FALSE;
                   QX_MPO_M3_Saw_Q4 := FALSE;
                   li_StepCase := 250;
               END_IF;
               
           250: 
               IF IX_MPO_RefSwitchTurnTable_PosSaw_I4 AND NOT IX_MPO_RefSwitchTurnTable_PosBelt_I2 AND NOT IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := TRUE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
               ELSIF NOT IX_MPO_RefSwitchTurnTable_PosSaw_I4 AND IX_MPO_RefSwitchTurnTable_PosBelt_I2 AND NOT IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := FALSE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
                   li_StepCase := 260;
               END_IF;
               
           260: 
               QX_MPO_ValveFeeder_Q14 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   QX_MPO_ValveFeeder_Q14 := FALSE;
                   QX_MPO_Compressor_Q10 := FALSE;
                   li_StepCase := 270;
               END_IF;
               
           270: 
               IF IX_MPO_RefSwitchTurnTable_PosSaw_I4 OR IX_MPO_RefSwitchTurnTable_PosBelt_I2 OR NOT IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := FALSE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := TRUE;
               ELSIF NOT IX_MPO_RefSwitchTurnTable_PosSaw_I4 AND NOT IX_MPO_RefSwitchTurnTable_PosBelt_I2 AND IX_MPO_RefSwitchTurnTable_PosVac_I1 THEN
                   QX_MPO_M1_TurnTableClockwise_Q1 := FALSE;
                   QX_MPO_M1_TurnTableCounterclockwise_Q2 := FALSE;
                   QX_MPO_Compressor_Q10 := FALSE;
                   li_StepCase := 280;
               END_IF;
               
           280: 
               QX_MPO_M2_ConveyorBeltForward_Q3 := TRUE;
               
               lx_Time_Error := TRUE;
               
               IF lfb_TOF_ConveyerBelt_Out.Q THEN
                   gtyp_SLD.History  := gtyp_MPO.History;
                   gtyp_SLD.Workpiece := gtyp_MPO.Workpiece;
                   gtyp_MPO.Workpiece.s_id := '0';
                   gtyp_MPO.Workpiece.s_state := '';
                   gtyp_MPO.Workpiece.s_type := '';
                   FOR li_Counter := 1 TO 8 DO
                       gtyp_MPO.History[li_Counter].i_code := 0;
                       gtyp_MPO.History[li_Counter].ldt_ts := DT#1990-01-01-00:00:00.00;
                   END_FOR;
                   
                   gtyp_Interface_Dashboard.Subscribe.State_MPO.x_active := FALSE;
                   
                   lx_Time_Error := FALSE;
                   li_StepCase := 290;
               END_IF;
               
               
               IF lfb_TON_Error.Q THEN
                   li_Lights := 4;
                   lx_Time_Error := FALSE;
                   QX_MPO_M2_ConveyorBeltForward_Q3 := FALSE;
                   gtyp_Interface_Dashboard.Subscribe.State_MPO.x_active := FALSE;
                   gtyp_MPO.x_Error := TRUE;
                   li_StepCase := 0;
               END_IF;
               
           290: 
               
               IF NOT lfb_TOF_ConveyerBelt_Out.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   QX_MPO_M2_ConveyorBeltForward_Q3 := FALSE;
                   li_StepCase := 60;
               END_IF;
           
           ELSE  
               ;
       END_CASE;
   
       QW_MPO_PWM_TurnTable_M1   := gtyp_MPO.i_PWM_TurnTable;
       QW_MPO_PWM_Vacuum_M5      := gtyp_MPO.i_PWM_Vacuum;
   
   ELSE
       li_Lights := 1;
       lx_Init := TRUE;
       gtyp_MPO.x_Start_Park_Position := FALSE;
       gtyp_MPO.x_Park_Position_Reached := FALSE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_VGR_Axis_vertical
   VAR 
      lx_Init : Bool;
      lfb_vertical_Axis : FB_Axis;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_vertical_Axis(ini_Axis         := 2,
                   indi_Increment          := gtyp_VGR.vertical_Axis.di_Increment,
                   inx_Ref_Switch          := IX_VGR_RefSwitchVerticalAxis_I1,
                   inx_Referencing         := gtyp_VGR.vertical_Axis.x_Reference,
                   inx_Start_Positioning   := gtyp_VGR.vertical_Axis.x_Start_Positioning,
                   indi_Target_Position    := gtyp_VGR.vertical_Axis.di_Target_Position,
                   ini_PWM                 := gtyp_VGR.vertical_Axis.i_PWM,
                   inouttyp_Config         := gtyp_VGR.vertical_Axis.Config,
                   inouttyp_Setup          := gtyp_SetupAxis);
       
       QX_VGR_M1_VerticalAxisUp_Q1       := lfb_vertical_Axis.outx_Motor_Neg;
       QX_VGR_M1_VerticalAxisDown_Q2     := lfb_vertical_Axis.outx_Motor_Pos;
       QW_VGR_PWM_Vertical_M1            := lfb_vertical_Axis.outi_Motor_PWM;
       gtyp_VGR.vertical_Axis.di_Actual_Position:= lfb_vertical_Axis.outdi_Actual_Position;
       gtyp_VGR.vertical_Axis.x_Referenced      := lfb_vertical_Axis.outx_Referenced;
       gtyp_VGR.vertical_Axis.x_Position_Reached:= lfb_vertical_Axis.outx_Position_Reached;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_HBW_Axis_Vertical
   VAR 
      lx_Init : Bool;
      lfb_Vertical_Axis : FB_Axis;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_Vertical_Axis( ini_Axis                := 7,
                           indi_Increment          := gtyp_HBW.Vertical_Axis.di_Increment,
                           inx_Ref_Switch          := IX_HBW_RefSwitchVerticalAxis_I4,
                           inx_Referencing         := gtyp_HBW.Vertical_Axis.x_Reference,
                           inx_Start_Positioning   := gtyp_HBW.Vertical_Axis.x_Start_Positioning,
                           indi_Target_Position    := gtyp_HBW.Vertical_Axis.di_Target_Position,
                           ini_PWM                 := gtyp_HBW.Vertical_Axis.i_PWM,
                           inouttyp_Config         := gtyp_HBW.Vertical_Axis.Config,
                           inouttyp_Setup          := gtyp_SetupAxis);
       
       QX_HBW_M3_VerticalAxisDownward_Q5           := lfb_Vertical_Axis.outx_Motor_Pos;
       QX_HBW_M3_VerticalAxisUpward_Q6             := lfb_Vertical_Axis.outx_Motor_Neg;
       QW_HBW_PWM_VerticalAxis_M3                  := lfb_Vertical_Axis.outi_Motor_PWM;
       gtyp_HBW.Vertical_Axis.di_Actual_Position   := lfb_Vertical_Axis.outdi_Actual_Position;
       gtyp_HBW.Vertical_Axis.x_Referenced         := lfb_Vertical_Axis.outx_Referenced;
       gtyp_HBW.Vertical_Axis.x_Position_Reached   := lfb_Vertical_Axis.outx_Position_Reached;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_DSI_Status
   VAR 
      lx_Init : Bool;
      lx_Start : Bool;
      li_StepCase : Int;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      lfb_R_Trig_Storage : R_TRIG;
      lfb_F_Trig_Storage : F_TRIG;
      lfb_TON_Status : TON_TIME;
      lx_StartStatus : Bool;
      lfb_TON_Schritt : TON_TIME;
      lx_StartTimer : Bool;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Status(IN := NOT lx_StartStatus,
                       PT := T#2s);
       
       
       lfb_R_Trig_Storage(CLK := NOT IX_SSC_LightBarrierStorage_I3);
       lfb_F_Trig_Storage(CLK := NOT IX_SSC_LightBarrierStorage_I3);
       
       
       IF (lfb_TON_Status.Q OR lfb_R_Trig_Storage.Q OR lfb_F_Trig_Storage.Q) AND NOT lx_StartStatus THEN
           lx_StartStatus := TRUE;
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           IF NOT IX_SSC_LightBarrierStorage_I3 THEN
               gtyp_Interface_Dashboard.Subscribe.State_DSI.i_code := 0;
               gtyp_Interface_Dashboard.Subscribe.State_DSI.x_active := TRUE;
           ELSE
               gtyp_Interface_Dashboard.Subscribe.State_DSI.i_code := 1;
               IF lfb_F_Trig_Storage.Q THEN
                   gtyp_Interface_Dashboard.Subscribe.State_DSI.x_active := FALSE;
               END_IF;
           END_IF;
           gtyp_Interface_Dashboard.Subscribe.State_DSI.ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_DSI.s_station := 'dsi';
           gtyp_Interface_Dashboard.Subscribe.State_DSI.s_target := '';
           gtyp_Interface_Dashboard.Subscribe.State_DSI.s_description := '';
       END_IF;
       
       IF NOT lfb_TON_Status.Q AND lx_StartStatus THEN
           lx_StartStatus := FALSE;
       END_IF;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SLD_Ablauf
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Time_Error : Bool;
      lt_TON_Wait : Time;
      lx_Start_TON_State : Bool;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      li_Lights : Int;
      li_Lights_old : Int;
      lw_ColorValueMin : Word;
      li_CounterActual : Int;
      lx_White : Bool;
      lx_Blue : Bool;
      lx_Red : Bool;
      li_StepCase : Int;
      ls_Color : String;
      lfb_TOF_ConveyerBelt_Out : TOF_TIME;
      lfb_TON_Wait : TON_TIME;
      lfb_TON_Error : TON_TIME;
      lfb_TON_State : TON_TIME;
      lfb_F_Trig_Counter : F_TRIG;
      lfb_R_Trig_Counter : R_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       IF gtyp_Setup.x_Color_Sensor_Calibration THEN
           li_StepCase := 0;
       END_IF;
       
       
       lfb_TON_State(IN := NOT lx_Start_TON_State,
                       PT := T#2s);
       
       
       IF (lfb_TON_State.Q OR (li_Lights <> li_Lights_old)) AND NOT lx_Start_TON_State THEN
           li_Lights_old := li_Lights;
           lx_Start_TON_State := TRUE;
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_SLD.ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_SLD.i_code := li_Lights;
           gtyp_Interface_Dashboard.Subscribe.State_SLD.s_description := '';
           gtyp_Interface_Dashboard.Subscribe.State_SLD.s_station := 'sld';
           gtyp_Interface_Dashboard.Subscribe.State_SLD.s_target := '';
       END_IF;
       
       
       IF NOT lfb_TON_State.Q AND lx_Start_TON_State THEN
           lx_Start_TON_State := FALSE;
       END_IF;
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                        PT := lt_TON_Wait);
       
       
       lfb_TON_Error(IN:= lx_Time_Error,
                      PT:= T#30s);
       
       
       lfb_R_Trig_Counter(CLK:= IX_SLD_PulseCounter_I1);
       
       
       lfb_F_Trig_Counter(CLK := IX_SLD_PulseCounter_I1);
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               lx_Time_Error := FALSE;
               li_Lights := 1;
               
               IF NOT gtyp_SLD.x_Error AND NOT gtyp_Setup.x_Color_Sensor_Calibration THEN
                   li_StepCase := 10;
               END_IF;
               
           10: 
               li_Lights := 2;
               QX_SLD_Compressor_Q2 := TRUE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#1000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 20;
               END_IF;
               
           20:  
               QX_SLD_ValveFirstEjectorWhite_Q3  := FALSE;
               QX_SLD_ValveSecondEjectorRed_Q4   := FALSE;
               QX_SLD_ValveThirdEjectorBlue_Q5   := FALSE;
               QX_SLD_M1_ConveyorBelt_Q1         := FALSE;
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 30;
               END_IF;
               
           30: 
               
               QX_SLD_Compressor_Q2 := FALSE;
               
               li_StepCase := 40;
               
           40: 
               
               li_Lights := 1;
               IF NOT IX_SLD_LightBarrierInlet_I2 THEN
                   gtyp_Interface_Dashboard.Subscribe.State_SLD.x_active := TRUE;
                   li_Lights := 2;
                   QX_SLD_Compressor_Q2      := TRUE;
                   QX_SLD_M1_ConveyorBelt_Q1 := TRUE;
                   lw_ColorValueMin           := 40000;
                   li_CounterActual := 0;
                   lx_Blue := FALSE;
                   lx_Red := FALSE;
                   lx_White := FALSE;
                   li_StepCase := 50;
               END_IF;
               
           50: 
               IF lw_ColorValueMin > IW_SLD_ColorSensor_A4 THEN
                   lw_ColorValueMin := IW_SLD_ColorSensor_A4;
               END_IF;
               
               lx_Time_Error := TRUE;
               
               
               IF NOT IX_SLD_LightBarrierBehindColorSensor_I3 THEN
                   lx_Time_Error  := FALSE;
                   li_StepCase    := 60;
               END_IF;
               
               
               IF lfb_TON_Error.Q THEN
                   li_Lights                  := 4;
                   lx_Time_Error              := FALSE;
                   QX_SLD_Compressor_Q2      := FALSE;
                   QX_SLD_M1_ConveyorBelt_Q1 := FALSE;
                   gtyp_Interface_Dashboard.Subscribe.State_SLD.x_active := FALSE;
                   gtyp_SLD.x_Error          := TRUE;
                   li_StepCase                := 0;
               END_IF;
               
           60: 
               
               IF lw_ColorValueMin >= gtyp_SLD.w_Threshold_Red_Blue THEN
                   lx_Blue := TRUE;
               ELSIF lw_ColorValueMin <= gtyp_SLD.w_Threshold_White_Red THEN
                   lx_White := TRUE;
               ELSIF lw_ColorValueMin > gtyp_SLD.w_Threshold_White_Red AND lw_ColorValueMin < gtyp_SLD.w_Threshold_Red_Blue THEN
                   lx_Red := TRUE;
               END_IF;
               
               
               IF lfb_R_Trig_Counter.Q OR lfb_F_Trig_Counter.Q THEN
                   li_CounterActual := li_CounterActual + 1;
               END_IF;
               
               
               IF (li_CounterActual = gtyp_SLD.i_CounterValue_Blue) AND lx_Blue THEN
                   QX_SLD_ValveThirdEjectorBlue_Q5 := TRUE;
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   gtyp_SLD.Workpiece.s_state := 'PROCESSED';
                   gtyp_SLD.History[7].i_code := 700;
                   gtyp_SLD.History[7].ldt_ts := DT_TO_LDT(ldt_MQTT);
                   li_StepCase := 70;
               ELSIF (li_CounterActual = gtyp_SLD.i_CounterValue_White) AND lx_White THEN
                   QX_SLD_ValveFirstEjectorWhite_Q3 := TRUE;
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   gtyp_SLD.Workpiece.s_state := 'PROCESSED';
                   gtyp_SLD.History[7].i_code := 700;
                   gtyp_SLD.History[7].ldt_ts := DT_TO_LDT(ldt_MQTT);
                   li_StepCase := 70;
               ELSIF (li_CounterActual = gtyp_SLD.i_CounterValue_Red) AND lx_Red THEN
                   QX_SLD_ValveSecondEjectorRed_Q4 := TRUE;
                   li_Return_LDT := RD_SYS_T(ldt_MQTT);
                   gtyp_SLD.Workpiece.s_state := 'PROCESSED';
                   gtyp_SLD.History[7].i_code := 700;
                   gtyp_SLD.History[7].ldt_ts := DT_TO_LDT(ldt_MQTT);
                   li_StepCase := 70;
               ELSIF (li_CounterActual = 80) THEN
                   li_Lights := 4;
                   gtyp_SLD.x_Error := TRUE;
                   li_StepCase := 70;
               END_IF;
               
           70: 
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#500ms;
               
               IF lfb_TON_Wait.Q THEN
                   QX_SLD_ValveThirdEjectorBlue_Q5 := FALSE;
                   QX_SLD_ValveFirstEjectorWhite_Q3 := FALSE;
                   QX_SLD_ValveSecondEjectorRed_Q4 := FALSE;
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80: 
               
               lx_Start_TON_Wait := TRUE;
               lt_TON_Wait := T#2000ms;
               
               IF lfb_TON_Wait.Q THEN
                   QX_SLD_Compressor_Q2 := FALSE;
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           90: 
               QX_SLD_M1_ConveyorBelt_Q1    := FALSE;
               li_StepCase := 40;
           
           ELSE  
               ;
       END_CASE;
    
   ELSE
       gtyp_SLD.x_Error := FALSE;
       li_Lights := 1;
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_HBW_Axis_Horizontal
   VAR 
      lx_Init : Bool;
      lfb_Horizontal_Axis : FB_Axis;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_Horizontal_Axis(ini_Axis               := 6,
                            indi_Increment          := gtyp_HBW.Horizontal_Axis.di_Increment,
                            inx_Ref_Switch         := IX_HBW_RefSwitchHorizontalAxis_I1,
                            inx_Referencing        := gtyp_HBW.Horizontal_Axis.x_Reference,
                            inx_Start_Positioning  := gtyp_HBW.Horizontal_Axis.x_Start_Positioning,
                            indi_Target_Position   := gtyp_HBW.Horizontal_Axis.di_Target_Position,
                            ini_PWM                := gtyp_HBW.Horizontal_Axis.i_PWM,
                            inouttyp_Config        := gtyp_HBW.Horizontal_Axis.Config,
                            inouttyp_Setup         := gtyp_SetupAxis);
       
       QX_HBW_M2_HorizontalTowardsRack_Q3            := lfb_Horizontal_Axis.outx_Motor_Pos;
       QX_HBW_M2_HorizontalTowardsConveyorBelt_Q4    := lfb_Horizontal_Axis.outx_Motor_Neg;
       QW_HBW_PWM_HorizontalAxis_M2                  := lfb_Horizontal_Axis.outi_Motor_PWM;
       gtyp_HBW.Horizontal_Axis.di_Actual_Position   := lfb_Horizontal_Axis.outdi_Actual_Position;
       gtyp_HBW.Horizontal_Axis.x_Referenced         := lfb_Horizontal_Axis.outx_Referenced;
       gtyp_HBW.Horizontal_Axis.x_Position_Reached   := lfb_Horizontal_Axis.outx_Position_Reached;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SSC_Light
   VAR 
      lx_Init : Bool;
      lx_Start : Bool;
      li_StepCase : Int;
      ldt_MQTT : Date_And_Time;
      lldt_ts_old : LDT;
      li_Return_LDT : Int;
      lfb_TOF_Camera : TOF_TIME;
      lfb_TON_Schritt : TON_TIME;
      lfb_blinker_cam : FB_Blinker;
      lfb_blinker_config : FB_Blinker;
      lx_StartTimer : Bool;
   END_VAR



   IF lx_Init THEN
       
       
       IF gtyp_Interface_Dashboard.Subscribe.CameraPicture.ldt_ts > lldt_ts_old THEN
           lldt_ts_old := gtyp_Interface_Dashboard.Subscribe.CameraPicture.ldt_ts;
           lfb_blinker_cam(int_periodendauer := T#50ms);
       END_IF;
       
       
       QX_SSC_LED_Red_Online_Q8:= lfb_blinker_cam.outx_blinker;
       
       
       lfb_blinker_config(int_periodendauer := T#500ms);
       
       
       
       IF gtyp_Setup.x_Set_Pos_Activ OR gtyp_Setup.x_Color_Sensor_Calibration
                                       OR gtyp_Setup.x_Counter_Value_Calibration
                                       OR gtyp_Setup.x_Clean_Rack_HBW THEN
           QX_SSC_LED_Green_Q5  := lfb_blinker_config.outx_blinker;
           QX_SSC_LED_Yellow_Q6 := lfb_blinker_config.outx_blinker;
           QX_SSC_LED_Red_Q7    := lfb_blinker_config.outx_blinker;
       
       ELSIF (gtyp_Interface_Dashboard.Subscribe.State_HBW.i_code = 4)
           OR (gtyp_Interface_Dashboard.Subscribe.State_MPO.i_code = 4)
           OR (gtyp_Interface_Dashboard.Subscribe.State_SLD.i_code = 4)
           OR (gtyp_Interface_Dashboard.Subscribe.State_VGR.i_code = 4) THEN
           QX_SSC_LED_Green_Q5 := FALSE;
           QX_SSC_LED_Yellow_Q6 := FALSE;
           QX_SSC_LED_Red_Q7 := TRUE;
       
       ELSIF (gtyp_Interface_Dashboard.Subscribe.State_HBW.i_code = 2)
           OR (gtyp_Interface_Dashboard.Subscribe.State_MPO.i_code = 2)
           OR (gtyp_Interface_Dashboard.Subscribe.State_SLD.i_code = 2)
           OR (gtyp_Interface_Dashboard.Subscribe.State_VGR.i_code = 2) THEN
               QX_SSC_LED_Green_Q5 := FALSE;
               QX_SSC_LED_Yellow_Q6 := TRUE;
               QX_SSC_LED_Red_Q7 := FALSE;
       
       ELSIF (gtyp_Interface_Dashboard.Subscribe.State_HBW.i_code = 1)
           AND (gtyp_Interface_Dashboard.Subscribe.State_MPO.i_code = 1)
           AND (gtyp_Interface_Dashboard.Subscribe.State_SLD.i_code = 1)
           AND (gtyp_Interface_Dashboard.Subscribe.State_VGR.i_code = 1) THEN
               QX_SSC_LED_Green_Q5 := TRUE;
               QX_SSC_LED_Yellow_Q6 := FALSE;
               QX_SSC_LED_Red_Q7 := FALSE;
       
       ELSE
           QX_SSC_LED_Green_Q5 := FALSE;
           QX_SSC_LED_Yellow_Q6 := FALSE;
           QX_SSC_LED_Red_Q7 := FALSE;
       END_IF;
       
       
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_DSO_Status
   VAR 
      lx_Init : Bool;
      lx_Start : Bool;
      li_StepCase : Int;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      li_code_old : Int;
      lfb_R_Trig_Outsourcing : R_TRIG;
      lfb_R_Trig_Take_Workpiece : R_TRIG;
      lfb_TON_Status : TON_TIME;
      lfb_TON_End_Order : TON_TIME;
      lx_StartStatus : Bool;
      lx_StartEndOrder : Bool;
      lx_StartTimer : Bool;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Status(IN := NOT lx_StartStatus,
                       PT := T#2s);
       
       
       lfb_R_Trig_Outsourcing(CLK := NOT IX_SSC_LightBarrierOutsourcing_I4);
       lfb_R_Trig_Take_Workpiece(CLK := IX_SSC_LightBarrierOutsourcing_I4);
       
       
       IF NOT IX_SSC_LightBarrierOutsourcing_I4 AND (gtyp_Interface_Dashboard.Subscribe.State_Order.s_state = 'SHIPPED') THEN
           lx_StartEndOrder := TRUE;
       END_IF;
       
       
       lfb_TON_End_Order(IN := lx_StartEndOrder,
                          PT := T#5s);
       
       IF lfb_R_Trig_Take_Workpiece.Q OR lfb_TON_End_Order.Q THEN
           lx_StartEndOrder := FALSE;
           gtyp_Interface_Dashboard.Subscribe.State_Order.ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_Order.s_state := 'WAITING_FOR_ORDER';
           gtyp_Interface_Dashboard.Subscribe.State_Order.s_type := '';
           gtyp_Interface_Dashboard.Subscribe.State_DSO.x_active := FALSE;
       END_IF;
       
       
       IF (lfb_TON_Status.Q OR lfb_R_Trig_Outsourcing.Q OR lfb_R_Trig_Take_Workpiece.Q) AND NOT lx_StartStatus THEN
           lx_StartStatus := TRUE;
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           IF NOT IX_SSC_LightBarrierOutsourcing_I4 THEN
               gtyp_Interface_Dashboard.Subscribe.State_DSO.i_code := 0;
           ELSE
               gtyp_Interface_Dashboard.Subscribe.State_DSO.i_code := 1;
           END_IF;
           gtyp_Interface_Dashboard.Subscribe.State_DSO.ldt_ts := DT_TO_LDT(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.State_DSO.s_station := 'dso';
           gtyp_Interface_Dashboard.Subscribe.State_DSO.s_target := '';
           gtyp_Interface_Dashboard.Subscribe.State_DSO.s_description := '';
       END_IF;
       
       IF NOT lfb_TON_Status.Q AND lx_StartStatus THEN
           lx_StartStatus := FALSE;
       END_IF;
   ELSE
       lx_Init := TRUE;
       lx_StartEndOrder := FALSE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SSC_Set_Positioning
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Start_Positioning_m : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      ldi_Pos_Horizontal : DInt;
      ldi_Pos_Vertical : DInt;
      lfb_R_Trig_Deaktivate : R_TRIG;
      lfb_TON_Wait : TON_TIME;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Deaktivate(CLK:= NOT gtyp_Setup.x_Set_Pos_Activ
                              OR NOT ((gtyp_Setup.i_Pos_Selection > 0)
                              AND (gtyp_Setup.i_Pos_Selection < 21)));
       
       IF lfb_R_Trig_Deaktivate.Q THEN
           gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
           gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
           gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
           gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
           gtyp_Setup.x_Start_Positioning := FALSE;
           gtyp_Setup.x_Final_Positioning := FALSE;
           gtyp_Setup.x_Home_Positioning := FALSE;
           gtyp_Setup.x_Start_Offset := FALSE;
           lx_Start_Positioning_m := FALSE;
           IF (li_StepCase > 10) THEN
               li_StepCase            := 70;
           END_IF;
       END_IF;
       
       
       IF gtyp_Setup.x_Set_Pos_Activ
           AND ((gtyp_Setup.i_Pos_Selection > 0)
           AND (gtyp_Setup.i_Pos_Selection < 21))
           AND ((li_StepCase = 40)
           OR (li_StepCase = 60)) THEN
           
           
           
           IF gtyp_Setup.i_Pos_Selection = 1 THEN
               ldi_Pos_Horizontal := gtyp_SSC.di_Pos_Centre_Horizontal;
               ldi_Pos_Vertical := gtyp_SSC.di_Pos_Centre_Vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 2 THEN
               ldi_Pos_Horizontal := gtyp_SSC.di_Pos_HBW_Horizontal;
               ldi_Pos_Vertical := gtyp_SSC.di_Pos_HBW_Vertical;
           END_IF;
       END_IF;
       
       
       IF NOT gtyp_Setup.x_Set_Pos_Activ THEN
           gtyp_Setup.i_Pos_Selection := 0;
       END_IF;
           
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_Setup.x_Set_Pos_Activ
                   AND ((gtyp_Setup.i_Pos_Selection > 0)
                   AND (gtyp_Setup.i_Pos_Selection < 21)) THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
                   gtyp_Setup.x_Start_Positioning := FALSE;
                   gtyp_Setup.x_Final_Positioning := FALSE;
                   gtyp_Setup.x_Home_Positioning  := FALSE;
                   gtyp_Setup.x_Start_Offset := FALSE;
                   li_StepCase := 20;
               END_IF;
               
           20: 
               
               gtyp_SSC.Horizontal_Axis.x_Reference := TRUE;
               gtyp_SSC.Vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_SSC.Horizontal_Axis.x_Referenced AND NOT gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   li_StepCase := 30;
               END_IF;
               
           30: 
               IF gtyp_SSC.Horizontal_Axis.x_Referenced THEN
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
               END_IF;
               
               IF gtyp_SSC.Horizontal_Axis.x_Referenced AND gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 40;
               END_IF;
               
           40:  
               IF gtyp_Setup.x_Start_Positioning OR lx_Start_Positioning_m THEN
                   lx_Start_Positioning_m := FALSE;
                   li_StepCase            := 50;
               END_IF;
               
           50: 
               gtyp_SSC.Horizontal_Axis.di_Target_Position := ldi_Pos_Horizontal;
               gtyp_SSC.Horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_SSC.Vertical_Axis.di_Target_Position := ldi_Pos_Vertical;
               gtyp_SSC.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (ldi_Pos_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (ldi_Pos_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (ldi_Pos_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (ldi_Pos_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_Setup.x_Start_Positioning := FALSE;
                   li_StepCase := 60;
               END_IF;
               
           60: 
               
               
               IF gtyp_Setup.x_Start_Positioning OR gtyp_Setup.x_Home_Positioning THEN
                   lx_Start_Positioning_m := TRUE;
                   li_StepCase            := 10;
               ELSIF lfb_R_Trig_Deaktivate.Q THEN
                   gtyp_Setup.x_Home_Positioning := FALSE;
                   li_StepCase                    := 70;
               END_IF;
               
           70: 
               
               gtyp_SSC.Horizontal_Axis.x_Reference := TRUE;
               gtyp_SSC.Vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_SSC.Horizontal_Axis.x_Referenced AND NOT gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   li_StepCase := 80;
               END_IF;
               
           80: 
               IF gtyp_SSC.Horizontal_Axis.x_Referenced THEN
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
               END_IF;
               
               IF gtyp_SSC.Horizontal_Axis.x_Referenced AND gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 0;
               END_IF;
               
               
           ELSE
               ;
       END_CASE;
       
       IF ((gtyp_Setup.i_Pos_Selection > 0)
           AND (gtyp_Setup.i_Pos_Selection < 21)) THEN
           
           gtyp_Setup.di_Pos_Horizontal := ldi_Pos_Horizontal;
           gtyp_Setup.di_Pos_Vertical := ldi_Pos_Vertical;
           gtyp_Setup.di_Pos_Rotate := 0;
       END_IF;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_HBW_Set_Positioning
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Start_Positioning_m : Bool;
      lx_Start_FinalPositioning_m : Bool;
      lx_Start_Offset_m : Bool;
      lt_TON_Wait : Time;
      li_Counter_Hor : Int;
      li_Counter_Ver : Int;
      li_Counter_Act_Hor : Int;
      li_Counter_Act_Ver : Int;
      li_Counter : Int;
      li_StepCase : Int;
      ldi_Pos_Horizontal : DInt;
      ldi_Pos_Vertical : DInt;
      ldi_Offset_Vertical : DInt;
      lfb_R_Trig_Deaktivate : R_TRIG;
      lfb_TON_Wait : TON_TIME;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Deaktivate(CLK:= NOT gtyp_Setup.x_Set_Pos_Activ
                              OR NOT ((gtyp_Setup.i_Pos_Selection > 20)
                              AND (gtyp_Setup.i_Pos_Selection < 41)));
       
       IF lfb_R_Trig_Deaktivate.Q THEN
           gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
           gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
           gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
           gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
           gtyp_Setup.x_Start_Positioning := FALSE;
           gtyp_Setup.x_Final_Positioning := FALSE;
           gtyp_Setup.x_Home_Positioning := FALSE;
           gtyp_Setup.x_Start_Offset := FALSE;
           QX_HBW_M4_CantileverBackward_Q8 := FALSE;
           QX_HBW_M4_CantileverForward_Q7 := FALSE;
           IF (li_StepCase > 10) THEN
               li_StepCase := 110;
           END_IF;
       END_IF;
       
       
       IF gtyp_Setup.x_Set_Pos_Activ
           AND ((gtyp_Setup.i_Pos_Selection > 20)
           AND (gtyp_Setup.i_Pos_Selection < 41))
           AND ((li_StepCase = 40)
           OR (li_StepCase = 60)
           OR (li_StepCase = 80)
           OR (li_StepCase = 100)) THEN
           
           
           
           IF gtyp_Setup.i_Pos_Selection = 21 THEN
               ldi_Pos_Horizontal := gtyp_HBW.di_PosBelt_Horizontal;
               ldi_Pos_Vertical := gtyp_HBW.di_PosBelt_Vertical;
               ldi_Offset_Vertical := gtyp_HBW.di_Offset_Pos_Belt_Vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 22 THEN
               ldi_Pos_Horizontal := gtyp_HBW.di_PosRack_A1_Horizontal;
               ldi_Pos_Vertical := gtyp_HBW.di_PosRack_A1_Vertical;
               ldi_Offset_Vertical := gtyp_HBW.di_Offset_Pos_Rack_Vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 23 THEN
               ldi_Pos_Horizontal := gtyp_HBW.di_PosRack_B2_Horizontal;
               ldi_Pos_Vertical := gtyp_HBW.di_PosRack_B2_Vertical;
               ldi_Offset_Vertical := gtyp_HBW.di_Offset_Pos_Rack_Vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 24 THEN
               ldi_Pos_Horizontal := gtyp_HBW.di_PosRack_C3_Horizontal;
               ldi_Pos_Vertical := gtyp_HBW.di_PosRack_C3_Vertical;
               ldi_Offset_Vertical := gtyp_HBW.di_Offset_Pos_Rack_Vertical;
           END_IF;
       END_IF;
       
       
       IF NOT gtyp_Setup.x_Set_Pos_Activ THEN
           gtyp_Setup.i_Pos_Selection := 0;
       END_IF;
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_Setup.x_Set_Pos_Activ
                   AND ((gtyp_Setup.i_Pos_Selection > 20)
                   AND (gtyp_Setup.i_Pos_Selection < 41)) THEN
                   
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning  := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning    := FALSE;
                   gtyp_HBW.Horizontal_Axis.x_Reference          := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Reference            := FALSE;
                   gtyp_Setup.x_Start_Positioning            := FALSE;
                   gtyp_Setup.x_Final_Positioning            := FALSE;
                   gtyp_Setup.x_Home_Positioning             := FALSE;
                   gtyp_Setup.x_Start_Offset                 := FALSE;
                   QX_HBW_M4_CantileverBackward_Q8               := FALSE;
                   QX_HBW_M4_CantileverForward_Q7                := FALSE;
                   li_StepCase                                    := 20;
               END_IF;
               
           20: 
               
               gtyp_HBW.Horizontal_Axis.x_Reference := TRUE;
               gtyp_HBW.Vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_HBW.Horizontal_Axis.x_Referenced AND NOT gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   li_StepCase := 30;
               END_IF;
               
           30: 
               IF gtyp_HBW.Horizontal_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
               END_IF;
               
               IF gtyp_HBW.Horizontal_Axis.x_Referenced AND gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 40;
               END_IF;
               
           40: 
               IF gtyp_Setup.x_Start_Positioning OR lx_Start_Positioning_m OR lx_Start_FinalPositioning_m OR lx_Start_Offset_m THEN
                   lx_Start_Positioning_m := FALSE;
                   li_StepCase := 50;
               END_IF;
               
           50: 
               gtyp_HBW.Horizontal_Axis.di_Target_Position   := ldi_Pos_Horizontal;
               gtyp_HBW.Horizontal_Axis.x_Start_Positioning  := TRUE;
               gtyp_HBW.Vertical_Axis.di_Target_Position     := ldi_Pos_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning    := TRUE;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (ldi_Pos_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (ldi_Pos_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (ldi_Pos_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (ldi_Pos_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning  := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning    := FALSE;
                   gtyp_Setup.x_Start_Positioning          := FALSE;
                   li_StepCase := 60;
               END_IF;
               
           60: 
               
               
               IF gtyp_Setup.x_Start_Positioning THEN
                   lx_Start_Positioning_m := TRUE;
                   li_StepCase := 10;
               
               ELSIF gtyp_Setup.x_Final_Positioning OR lx_Start_FinalPositioning_m OR lx_Start_Offset_m THEN
                   lx_Start_FinalPositioning_m := FALSE;
                   li_StepCase := 70;
               
               ELSIF lfb_R_Trig_Deaktivate.Q OR gtyp_Setup.x_Home_Positioning THEN
                   gtyp_Setup.x_Home_Positioning := FALSE;
                   li_StepCase := 110;
               END_IF;
               
           70: 
               
               QX_HBW_M4_CantileverBackward_Q8 := FALSE;
               QX_HBW_M4_CantileverForward_Q7 := TRUE;
               
               IF IX_HBW_SwitchCantileverFront_I5 AND NOT IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   gtyp_Setup.x_Final_Positioning := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80: 
               
               
               IF gtyp_Setup.x_Start_Positioning THEN
                   lx_Start_Positioning_m := TRUE;
                   li_StepCase := 110;
                   
               ELSIF gtyp_Setup.x_Final_Positioning THEN
                   lx_Start_FinalPositioning_m := TRUE;
                   li_StepCase := 110;
                   
               ELSIF gtyp_Setup.x_Start_Offset OR lx_Start_Offset_m THEN
                   lx_Start_Offset_m := FALSE;
                   li_StepCase := 90;
                   
               ELSIF lfb_R_Trig_Deaktivate.Q OR gtyp_Setup.x_Home_Positioning THEN
                   gtyp_Setup.x_Home_Positioning := FALSE;
                   li_StepCase := 110;
               END_IF;
               
           90: 
               gtyp_HBW.Vertical_Axis.di_Target_Position := ldi_Pos_Vertical - ldi_Offset_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical - ldi_Offset_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - ldi_Offset_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_Setup.x_Start_Offset            := FALSE;
                   li_StepCase := 100;
               END_IF;
               
           100: 
               
               
               IF gtyp_Setup.x_Start_Positioning THEN
                   lx_Start_Positioning_m := TRUE;
                   li_StepCase := 110;
                   
               ELSIF gtyp_Setup.x_Final_Positioning THEN
                   lx_Start_FinalPositioning_m := TRUE;
                   li_StepCase := 110;
                   
               ELSIF gtyp_Setup.x_Start_Offset THEN
                   lx_Start_Offset_m := true;
                   li_StepCase := 110;
                   
               ELSIF lfb_R_Trig_Deaktivate.Q OR gtyp_Setup.x_Home_Positioning THEN
                   gtyp_Setup.x_Home_Positioning := FALSE;
                   li_StepCase := 110;
               END_IF;
               
           110: 
               gtyp_HBW.Vertical_Axis.di_Target_Position := ldi_Pos_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 120;
               END_IF;
               
           120: 
               
               QX_HBW_M4_CantileverBackward_Q8 := TRUE;
               QX_HBW_M4_CantileverForward_Q7 := FALSE;
               
               IF NOT IX_HBW_SwitchCantileverFront_I5 AND IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 130;
               END_IF;
               
           130: 
               
               gtyp_HBW.Horizontal_Axis.x_Reference := TRUE;
               gtyp_HBW.Vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_HBW.Horizontal_Axis.x_Referenced AND NOT gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   li_StepCase := 140;
               END_IF;
               
           140: 
               IF gtyp_HBW.Horizontal_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
               END_IF;
               
               IF gtyp_HBW.Horizontal_Axis.x_Referenced AND gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 0;
               END_IF;
               
       
       ELSE  
           ;
       END_CASE;
       
       IF ((gtyp_Setup.i_Pos_Selection > 20)
           AND (gtyp_Setup.i_Pos_Selection < 41)) THEN
           
           gtyp_Setup.di_Pos_Horizontal := ldi_Pos_Horizontal;
           gtyp_Setup.di_Pos_Vertical := ldi_Pos_Vertical;
           gtyp_Setup.di_Pos_Rotate := 0;
       END_IF;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_VGR_Set_Positioning
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Start_Positioning_m : Bool;
      lx_Start_FinalPositioning_m : Bool;
      lx_Start_TON_State : Bool;
      lt_TON_Wait : Time;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      li_Lights : Int;
      li_Lights_old : Int;
      lx_State_activ : Bool;
      li_StepCase : Int;
      li_Counter : Int;
      ldi_Pos_SLD_X : DInt;
      ldi_Pos_SLD_Y : DInt;
      ldi_Pos_SLD_Z : DInt;
      ldi_Pos_Horizontal : DInt;
      ldi_Pos_Vertical : DInt;
      ldi_Pos_Rotate : DInt;
      ldi_Offset_Vertical : DInt;
      ls_Color : String;
      ls_Target : String;
      lfb_TON_Wait : TON_TIME;
      lfb_TON_State : TON_TIME;
      lfb_R_Trig_Deaktivate : R_TRIG;
      lfb_R_Trig_NiO : R_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Deaktivate(CLK := NOT gtyp_Setup.x_Set_Pos_Activ
                              OR NOT ((gtyp_Setup.i_Pos_Selection > 40)
                              AND (gtyp_Setup.i_Pos_Selection < 61)));
       
       IF lfb_R_Trig_Deaktivate.Q THEN
           gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
           gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
           gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
           gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
           gtyp_VGR.vertical_Axis.x_Reference := FALSE;
           gtyp_VGR.rotate_Axis.x_Reference := FALSE;
           gtyp_Setup.x_Start_Positioning := FALSE;
           gtyp_Setup.x_Final_Positioning := FALSE;
           gtyp_Setup.x_Home_Positioning := FALSE;
           gtyp_Setup.x_Start_Offset := FALSE;
           IF (li_StepCase > 10) THEN
               li_StepCase := 150;
           END_IF;
       END_IF;
       
       
       IF gtyp_Setup.x_Set_Pos_Activ
           AND ((gtyp_Setup.i_Pos_Selection > 40)
           AND (gtyp_Setup.i_Pos_Selection < 61))
           AND ((li_StepCase = 80)
           OR (li_StepCase = 120)
           OR (li_StepCase = 140)) THEN
           
           
           
           IF gtyp_Setup.i_Pos_Selection = 41 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_Color_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_Color_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_Color_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 42 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_DSI_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_DSI_Collect_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_DSI_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 43 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_DSI_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_DSI_Discard_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_DSI_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 44 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_DSO_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_DSO_Collect_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_DSO_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_DSO_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 45 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_DSO_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_DSO_Discard_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_DSO_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_DSO_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 46 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_HBW_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_HBW_Collect_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_HBW_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_HBW_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 47 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_HBW_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_HBW_Discard_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_HBW_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_HBW_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 48 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_MPO_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_MPO_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_MPO_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_MPO_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 49 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_NFC_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_NFC_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_NFC_rotate;
               ldi_Offset_Vertical := gtyp_VGR.di_Offset_Pos_DSI_NFC_vertical;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 50 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_NiO_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_NiO_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_NiO_rotate;
               ldi_Offset_Vertical := 500;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 51 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_SLD_Blue_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_SLD_Blue_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_SLD_Blue_rotate;
               ldi_Offset_Vertical := 500;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 52 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_SLD_Red_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_SLD_Red_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_SLD_Red_rotate;
               ldi_Offset_Vertical := 500;
               
           ELSIF gtyp_Setup.i_Pos_Selection = 53 THEN
               ldi_Pos_Horizontal := gtyp_VGR.di_Pos_SLD_White_horizontal;
               ldi_Pos_Vertical := gtyp_VGR.di_Pos_SLD_White_vertical;
               ldi_Pos_Rotate := gtyp_VGR.di_Pos_SLD_White_rotate;
               ldi_Offset_Vertical := 500;
           END_IF;
       END_IF;
       
       
       IF NOT gtyp_Setup.x_Set_Pos_Activ THEN
           gtyp_Setup.i_Pos_Selection := 0;
       END_IF;
           
           
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_Setup.x_Set_Pos_Activ
                   AND ((gtyp_Setup.i_Pos_Selection > 40)
                   AND (gtyp_Setup.i_Pos_Selection < 61)) THEN
                   
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   gtyp_VGR.rotate_Axis.x_Reference := FALSE;
                   gtyp_Setup.x_Start_Positioning := FALSE;
                   gtyp_Setup.x_Final_Positioning := FALSE;
                   gtyp_Setup.x_Home_Positioning := FALSE;
                   gtyp_Setup.x_Start_Offset := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 20;
               END_IF;
               
           20: 
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 30;
               END_IF;
           
           30: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 40;
               END_IF;
                   
           40: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 50;
               END_IF;
                   
           50: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 60;
               END_IF;
                   
           60: 
               gtyp_VGR.rotate_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.rotate_Axis.x_Referenced THEN
                   li_StepCase := 70;
               END_IF;
                   
           70: 
               IF gtyp_VGR.rotate_Axis.x_Referenced THEN
                   gtyp_VGR.rotate_Axis.x_Reference := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80:  
               IF gtyp_Setup.x_Start_Positioning OR lx_Start_Positioning_m OR lx_Start_FinalPositioning_m THEN
                   lx_Start_Positioning_m := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           90: 
               gtyp_VGR.rotate_Axis.di_Target_Position   := ldi_Pos_Rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning  := TRUE;
                   
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (ldi_Pos_Rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (ldi_Pos_Rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 100;
               END_IF;
               
           100: 
               gtyp_VGR.horizontal_Axis.di_Target_Position := ldi_Pos_Horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (ldi_Pos_Horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (ldi_Pos_Horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 110;
               END_IF;
               
           110: 
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               gtyp_VGR.vertical_Axis.di_Target_Position := ldi_Pos_Vertical - ldi_Offset_Vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical - ldi_Offset_Vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - ldi_Offset_Vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_Setup.x_Start_Positioning := FALSE;
                   li_StepCase := 120;
               END_IF;
               
           120: 
               
               
               IF gtyp_Setup.x_Start_Positioning THEN
                   lx_Start_Positioning_m := TRUE;
                   li_StepCase := 10;
                   
               ELSIF gtyp_Setup.x_Final_Positioning OR lx_Start_FinalPositioning_m THEN
                   lx_Start_FinalPositioning_m := FALSE;
                   li_StepCase := 130;
                   
               ELSIF lfb_R_Trig_Deaktivate.Q OR gtyp_Setup.x_Home_Positioning THEN
                   gtyp_Setup.x_Home_Positioning := FALSE;
                   li_StepCase := 150;
               END_IF;
               
           130: 
               gtyp_VGR.vertical_Axis.di_Target_Position := ldi_Pos_Vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (ldi_Pos_Vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (ldi_Pos_Vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_Setup.x_Final_Positioning := FALSE;
                   li_StepCase := 140;
               END_IF;
               
           140: 
               
               
               IF gtyp_Setup.x_Start_Positioning THEN
                   lx_Start_Positioning_m := TRUE;
                   li_StepCase := 10;
                   
               ELSIF gtyp_Setup.x_Final_Positioning THEN
                   lx_Start_FinalPositioning_m := TRUE;
                   li_StepCase := 10;
                   
               ELSIF lfb_R_Trig_Deaktivate.Q OR gtyp_Setup.x_Home_Positioning THEN
                   gtyp_Setup.x_Home_Positioning := FALSE;
                   li_StepCase := 150;
               END_IF;
               
           150: 
               gtyp_VGR.vertical_Axis.i_PWM := 800;
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 160;
               END_IF;
               
           160: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 170;
               END_IF;
               
           170: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 180;
               END_IF;
               
           180: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 0;
               END_IF;
               
               
           ELSE
               ;
       END_CASE;
       
       IF ((gtyp_Setup.i_Pos_Selection > 40)
           AND (gtyp_Setup.i_Pos_Selection < 61)) THEN
           
           gtyp_Setup.di_Pos_Horizontal := ldi_Pos_Horizontal;
           gtyp_Setup.di_Pos_Vertical := ldi_Pos_Vertical;
           gtyp_Setup.di_Pos_Rotate := ldi_Pos_Rotate;
       END_IF;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SSC_Ablauf
   VAR 
      lx_Init : Bool;
      lx_FirstCentre : Bool;
      lx_Start : Bool;
      lx_Start_TON_State : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      ldi_TargetPosition_Horizontal : DInt;
      ldi_TargetPosition_Vertical : DInt;
      lldt_ts_old : LDT;
      ldt_write : Date_And_Time;
      li_Return_write : Int;
      ldt_MQTT : Date_And_Time;
      li_Return_LDT : Int;
      lx_Start_TON_Wait : Bool;
      ldi_StepHorizontal : DInt;
      ldi_StepVertical : DInt;
      lfb_TON_Wait : TON_TIME;
      lfb_TON_State : TON_TIME;
      lfb_F_TRIG_Set_Pos : F_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       IF gtyp_Setup.x_Set_Pos_Activ OR gtyp_SSC.x_Start_Park_Position THEN
           li_StepCase := 0;
       END_IF;
       
       
       lfb_F_TRIG_Set_Pos(CLK:= gtyp_Setup.x_Set_Pos_Activ);
       
       IF lfb_F_TRIG_Set_Pos.Q THEN
           lx_FirstCentre := TRUE;
       END_IF;
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                        PT := lt_TON_Wait);
           
       
       lfb_TON_State(IN := NOT lx_Start_TON_State,
                      PT := T#2s);
       
       
       IF lfb_TON_State.Q AND NOT lx_Start_TON_State THEN
           lx_Start_TON_State := TRUE;
           li_Return_LDT := RD_SYS_T(ldt_MQTT);
           gtyp_Interface_Dashboard.Subscribe.PosPanTiltUnit.ldt_ts := DT_TO_LDT(ldt_MQTT);
       END_IF;
       
       
       IF NOT lfb_TON_State.Q AND lx_Start_TON_State THEN
           lx_Start_TON_State := FALSE;
       END_IF;
           
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_State := FALSE;
               gtyp_SSC.Horizontal_Axis.x_Start_Positioning  := FALSE;
               gtyp_SSC.Vertical_Axis.x_Start_Positioning    := FALSE;
               
               IF NOT gtyp_Setup.x_Set_Pos_Activ AND NOT gtyp_SSC.x_Start_Park_Position THEN
                   li_StepCase := 10;
               END_IF;
               
           10: 
               
               IF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.ldt_ts > lldt_ts_old) OR lx_FirstCentre THEN
                   
                   lldt_ts_old := gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.ldt_ts;
                   
                   
                   ldi_StepHorizontal := REAL_TO_DINT(FC_Scale_linear(inr_Y1 := DINT_TO_REAL(gtyp_SSC.Horizontal_Axis.Config.di_Neg_Soft_Switch),
                                                                                                             inr_Y2 := DINT_TO_REAL(gtyp_SSC.Horizontal_Axis.Config.di_Pos_Soft_Switch),
                                                                                                             inr_X1 := 0.0,
                                                                                                             inr_X2 := 180.0,
                                                                                                             inr_X := DINT_TO_REAL(gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.i_degree)));
                   ldi_StepVertical := REAL_TO_DINT(FC_Scale_linear(inr_Y1 := DINT_TO_REAL(gtyp_SSC.Vertical_Axis.Config.di_Neg_Soft_Switch),
                                                                                                         inr_Y2 := DINT_TO_REAL(gtyp_SSC.Vertical_Axis.Config.di_Pos_Soft_Switch),
                                                                                                         inr_X1 := 0.0,
                                                                                                         inr_X2 := 180.0,
                                                                                                         inr_X := DINT_TO_REAL(gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.i_degree)));
                   
                   IF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'relmove_left')
                       AND ((gtyp_SSC.Horizontal_Axis.di_Actual_Position - ldi_StepHorizontal) > gtyp_SSC.Horizontal_Axis.Config.di_Neg_Soft_Switch + 15)
                       AND NOT IX_SSC_RefSwitchHorizontalAxis_I2 THEN
                       ldi_TargetPosition_Horizontal := gtyp_SSC.Horizontal_Axis.di_Actual_Position - ldi_StepHorizontal;
                       gtyp_SSC.Horizontal_Axis.di_Target_Position := ldi_TargetPosition_Horizontal;
                       gtyp_SSC.Horizontal_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 70;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'relmove_right')
                       AND ((gtyp_SSC.Horizontal_Axis.di_Actual_Position + ldi_StepHorizontal) < gtyp_SSC.Horizontal_Axis.Config.di_Pos_Soft_Switch - 15) THEN
                       ldi_TargetPosition_Horizontal := gtyp_SSC.Horizontal_Axis.di_Actual_Position + ldi_StepHorizontal;
                       gtyp_SSC.Horizontal_Axis.di_Target_Position := ldi_TargetPosition_Horizontal;
                       gtyp_SSC.Horizontal_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 70;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'relmove_up')
                       AND ((gtyp_SSC.Vertical_Axis.di_Actual_Position + ldi_StepHorizontal) < gtyp_SSC.Vertical_Axis.Config.di_Pos_Soft_Switch - 15) THEN
                       ldi_TargetPosition_Vertical := gtyp_SSC.Vertical_Axis.di_Actual_Position + ldi_StepVertical;
                       gtyp_SSC.Vertical_Axis.di_Target_Position := ldi_TargetPosition_Vertical;
                       gtyp_SSC.Vertical_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 80;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'relmove_down')
                       AND ((gtyp_SSC.Vertical_Axis.di_Actual_Position - ldi_StepVertical) > gtyp_SSC.Vertical_Axis.Config.di_Neg_Soft_Switch + 15)
                       AND NOT IX_SSC_RefSwitchVerticalAxis_I1 THEN
                       ldi_TargetPosition_Vertical := gtyp_SSC.Vertical_Axis.di_Actual_Position - ldi_StepVertical;
                       gtyp_SSC.Vertical_Axis.di_Target_Position := ldi_TargetPosition_Vertical;
                       gtyp_SSC.Vertical_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 80;
                   
                   ELSIF lx_FirstCentre THEN
                       li_StepCase := 20;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'home') THEN
                       li_StepCase := 60;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'start_pan')
                       AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position > gtyp_SSC.Horizontal_Axis.Config.di_Neg_Soft_Switch + 15)
                       AND NOT IX_SSC_RefSwitchHorizontalAxis_I2 THEN
                       ldi_TargetPosition_Horizontal := gtyp_SSC.Horizontal_Axis.Config.di_Neg_Soft_Switch + 15;
                       gtyp_SSC.Horizontal_Axis.di_Target_Position := ldi_TargetPosition_Horizontal;
                       gtyp_SSC.Horizontal_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 70;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'end_pan')
                       AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position < gtyp_SSC.Horizontal_Axis.Config.di_Pos_Soft_Switch - 15) THEN
                       ldi_TargetPosition_Horizontal := gtyp_SSC.Horizontal_Axis.Config.di_Pos_Soft_Switch - 15;
                       gtyp_SSC.Horizontal_Axis.di_Target_Position := ldi_TargetPosition_Horizontal;
                       gtyp_SSC.Horizontal_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 70;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'start_tilt')
                       AND (gtyp_SSC.Vertical_Axis.di_Actual_Position > gtyp_SSC.Vertical_Axis.Config.di_Neg_Soft_Switch + 15)
                       AND NOT IX_SSC_RefSwitchVerticalAxis_I1 THEN
                       ldi_TargetPosition_Vertical := gtyp_SSC.Vertical_Axis.Config.di_Neg_Soft_Switch + 15;
                       gtyp_SSC.Vertical_Axis.di_Target_Position := ldi_TargetPosition_Vertical;
                       gtyp_SSC.Vertical_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 80;
                   
                   ELSIF (gtyp_Interface_Dashboard.Publish.PosPanTiltUnit.s_cmd = 'end_tilt')
                       AND (gtyp_SSC.Vertical_Axis.di_Actual_Position < gtyp_SSC.Vertical_Axis.Config.di_Pos_Soft_Switch - 15) THEN
                       ldi_TargetPosition_Vertical := gtyp_SSC.Vertical_Axis.Config.di_Pos_Soft_Switch - 15;
                       gtyp_SSC.Vertical_Axis.di_Target_Position := ldi_TargetPosition_Vertical;
                       gtyp_SSC.Vertical_Axis.x_Start_Positioning := TRUE;
                       li_StepCase := 80;
                   END_IF;
               END_IF;
               
           20: 
               gtyp_SSC.Horizontal_Axis.x_Reference  := TRUE;
               gtyp_SSC.Vertical_Axis.x_Reference    := TRUE;
               
               IF NOT gtyp_SSC.Horizontal_Axis.x_Referenced AND NOT gtyp_SSC.Vertical_Axis.x_Referenced THEN
                  li_StepCase := 30;
               END_IF;
               
           30: 
               IF gtyp_SSC.Horizontal_Axis.x_Referenced THEN
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
               END_IF;
               IF gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
               END_IF;
               
               IF gtyp_SSC.Horizontal_Axis.x_Referenced AND gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
                   lx_Start_TON_Wait := TRUE;
                   li_StepCase := 40;
               END_IF;
               
           40: 
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 50;
               END_IF;
               
           50: 
               gtyp_SSC.Horizontal_Axis.di_Target_Position   := gtyp_SSC.di_Pos_HBW_Horizontal;
               gtyp_SSC.Horizontal_Axis.x_Start_Positioning  := TRUE;
               gtyp_SSC.Vertical_Axis.di_Target_Position     := gtyp_SSC.di_Pos_HBW_Vertical;
               gtyp_SSC.Vertical_Axis.x_Start_Positioning    := TRUE;
               
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_HBW_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_HBW_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_HBW_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_HBW_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_HBW_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_HBW_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_HBW_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_HBW_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
                   lx_FirstCentre := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           60: 
               gtyp_SSC.Horizontal_Axis.di_Target_Position := gtyp_SSC.di_Pos_Centre_Horizontal;
               gtyp_SSC.Horizontal_Axis.x_Start_Positioning := TRUE;
               gtyp_SSC.Vertical_Axis.di_Target_Position := gtyp_SSC.di_Pos_Centre_Vertical;
               gtyp_SSC.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_Centre_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_Centre_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_Centre_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_Centre_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
               END_IF;
               
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_Centre_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_Centre_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_Centre_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_Centre_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
                   lx_FirstCentre := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           70: 
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (ldi_TargetPosition_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (ldi_TargetPosition_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           80: 
               IF (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (ldi_TargetPosition_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (ldi_TargetPosition_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           90: 
               gtyp_Interface_Dashboard.Subscribe.PosPanTiltUnit.r_pan := FC_Scale_linear(inr_Y1 := -1.0,
                                                                                              inr_Y2 := 1.0,
                                                                                              inr_X1 := DINT_TO_REAL(gtyp_SSC.Horizontal_Axis.Config.di_Neg_Soft_Switch),
                                                                                              inr_X2 := DINT_TO_REAL(gtyp_SSC.Horizontal_Axis.Config.di_Pos_Soft_Switch),
                                                                                              inr_X := gtyp_SSC.Horizontal_Axis.di_Actual_Position);
               gtyp_Interface_Dashboard.Subscribe.PosPanTiltUnit.r_tilt:= FC_Scale_linear(inr_Y1 := -1.0,
                                                                                              inr_Y2 := 1.0,
                                                                                              inr_X1 := DINT_TO_REAL(gtyp_SSC.Vertical_Axis.Config.di_Neg_Soft_Switch),
                                                                                              inr_X2 := DINT_TO_REAL(gtyp_SSC.Vertical_Axis.Config.di_Pos_Soft_Switch),
                                                                                              inr_X := gtyp_SSC.Vertical_Axis.di_Actual_Position);
               
               li_Return_write := RD_SYS_T(ldt_write);
               gtyp_Interface_Dashboard.Subscribe.PosPanTiltUnit.ldt_ts := DT_TO_LDT(ldt_write);
               lx_Start_TON_Wait := TRUE;
               li_StepCase := 100;
               
           100:
               IF lfb_TON_Wait.Q THEN
                   lx_Start_TON_Wait := FALSE;
                   li_StepCase := 0;
               END_IF;
       
       ELSE  
           ;
       END_CASE;
    
   ELSE
       lx_Init := TRUE;
       lx_FirstCentre := TRUE;
       
       gtyp_SSC.x_Start_Park_Position := FALSE;
       gtyp_SSC.x_Park_Position_Reached := FALSE;
       gtyp_SSC.x_Error := FALSE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SLD_Calibration_Color
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lx_Start_Positioning_m : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      lw_ColorValueMin : Word;
      ldi_Pos_Horizontal : DInt;
      ldi_Pos_Vertical : DInt;
      lfb_R_Trig_Deaktivate : R_TRIG;
      lfb_TON_Wait : TON_TIME;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Deaktivate(CLK:= NOT gtyp_Setup.x_Color_Sensor_Calibration
                              OR NOT (gtyp_Setup.i_Color_Sensor_Selection = 2));
       
       IF lfb_R_Trig_Deaktivate.Q THEN
           gtyp_Setup.x_Calculate_Value_Color := FALSE;
           gtyp_Setup.x_Set_Calib_Value_Color_Blue := FALSE;
           gtyp_Setup.x_Set_Calib_Value_Color_Red := FALSE;
           gtyp_Setup.x_Set_Calib_Value_Color_White := FALSE;
           gtyp_Setup.w_Calib_ColorValue_Blue := 0;
           gtyp_Setup.w_Calib_ColorValue_Red := 0;
           gtyp_Setup.w_Calib_ColorValue_White := 0;
           gtyp_Setup.w_Threshold_Red_Blue := 0;
           gtyp_Setup.w_Threshold_White_Red := 0;
           QX_SLD_M1_ConveyorBelt_Q1 := FALSE;
           lw_ColorValueMin := 16#FF;
           li_StepCase            := 0;
       END_IF;
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_Setup.x_Color_Sensor_Calibration
                   AND (gtyp_Setup.i_Color_Sensor_Selection = 2) THEN
                   gtyp_Setup.x_Calculate_Value_Color := FALSE;
                   gtyp_Setup.x_Set_Calib_Value_Color_Blue := FALSE;
                   gtyp_Setup.x_Set_Calib_Value_Color_Red := FALSE;
                   gtyp_Setup.x_Set_Calib_Value_Color_White := FALSE;
                   gtyp_Setup.w_Calib_ColorValue_Blue := 0;
                   gtyp_Setup.w_Calib_ColorValue_Red := 0;
                   gtyp_Setup.w_Calib_ColorValue_White := 0;
                   gtyp_Setup.w_Threshold_Red_Blue := 0;
                   gtyp_Setup.w_Threshold_White_Red := 0;
                   QX_SLD_M1_ConveyorBelt_Q1 := FALSE;
                   lw_ColorValueMin := 16#FFFF;
                   li_StepCase := 20;
               END_IF;
               
           20: 
               
               IF NOT IX_SLD_LightBarrierInlet_I2 THEN
                   QX_SLD_M1_ConveyorBelt_Q1 := TRUE;
                   lw_ColorValueMin := 16#FFFF;
               END_IF;
                   
               IF lw_ColorValueMin > IW_SLD_ColorSensor_A4 THEN
                   lw_ColorValueMin := IW_SLD_ColorSensor_A4;
               END_IF;
               
               IF NOT IX_SLD_LightBarrierBehindColorSensor_I3 THEN
                   QX_SLD_M1_ConveyorBelt_Q1 := FALSE;
               END_IF;
               
               
               IF gtyp_Setup.x_Set_Calib_Value_Color_Blue THEN
                   gtyp_Setup.w_Calib_ColorValue_Blue := lw_ColorValueMin;
                   gtyp_Setup.x_Set_Calib_Value_Color_Blue := FALSE;
               ELSIF gtyp_Setup.x_Set_Calib_Value_Color_Red THEN
                   gtyp_Setup.w_Calib_ColorValue_Red := lw_ColorValueMin;
                   gtyp_Setup.x_Set_Calib_Value_Color_Red := FALSE;
               ELSIF gtyp_Setup.x_Set_Calib_Value_Color_White THEN
                   gtyp_Setup.w_Calib_ColorValue_White := lw_ColorValueMin;
                   gtyp_Setup.x_Set_Calib_Value_Color_White := FALSE;
               END_IF;
               
               gtyp_Setup.w_Threshold_White_Red := gtyp_Setup.w_Calib_ColorValue_White + ((gtyp_Setup.w_Calib_ColorValue_Red - gtyp_Setup.w_Calib_ColorValue_White) / 2);
               gtyp_Setup.w_Threshold_Red_Blue := gtyp_Setup.w_Calib_ColorValue_Red + ((gtyp_Setup.w_Calib_ColorValue_Blue - gtyp_Setup.w_Calib_ColorValue_Red) / 2);
               
               IF gtyp_Setup.x_Calculate_Value_Color THEN
                   gtyp_SLD.w_Threshold_White_Red := gtyp_Setup.w_Threshold_White_Red;
                   gtyp_SLD.w_Threshold_Red_Blue := gtyp_Setup.w_Threshold_Red_Blue;
                   gtyp_Setup.x_Calculate_Value_Color := FALSE;
               END_IF;
               
               
           ELSE
               ;
       END_CASE;
       
       IF (gtyp_Setup.i_Color_Sensor_Selection = 2) THEN
           
           gtyp_Setup.w_Actual_ColorValue := IW_SLD_ColorSensor_A4;
       END_IF;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SSC_Axis_Vertical
   VAR 
      lx_Init : Bool;
      lfb_Vertical_Axis : FB_Axis;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_Vertical_Axis( ini_Axis                := 5,
                           indi_Increment          := gtyp_SSC.Vertical_Axis.di_Increment,
                           inx_Ref_Switch          := IX_SSC_RefSwitchVerticalAxis_I1,
                           inx_Referencing         := gtyp_SSC.Vertical_Axis.x_Reference,
                           inx_Start_Positioning   := gtyp_SSC.Vertical_Axis.x_Start_Positioning,
                           indi_Target_Position    := gtyp_SSC.Vertical_Axis.di_Target_Position,
                           ini_PWM               := gtyp_SSC.Vertical_Axis.i_PWM,
                           inouttyp_Config         := gtyp_SSC.Vertical_Axis.Config,
                           inouttyp_Setup          := gtyp_SetupAxis);
       
       QX_SSC_M1_VerticalAxisUp_Q1                    := lfb_Vertical_Axis.outx_Motor_Pos;
       QX_SSC_M1_VerticalAxisDown_Q2                  := lfb_Vertical_Axis.outx_Motor_Neg;
       QW_SSC_PWM_Vertical_M1                         := lfb_Vertical_Axis.outi_Motor_PWM;
       gtyp_SSC.Vertical_Axis.di_Actual_Position   := lfb_Vertical_Axis.outdi_Actual_Position;
       gtyp_SSC.Vertical_Axis.x_Referenced         := lfb_Vertical_Axis.outx_Referenced;
       gtyp_SSC.Vertical_Axis.x_Position_Reached   := lfb_Vertical_Axis.outx_Position_Reached;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SSC_Set_Park_Position
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      lfb_TON_Wait : TON_TIME;
      lfb_R_Trig_Start_Park_Pos : R_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Start_Park_Pos(CLK := gtyp_Setup.x_Park_Position
                                  OR IX_Set_Park_Position);
       
       
       IF lfb_R_Trig_Start_Park_Pos.Q THEN
           gtyp_SSC.x_Start_Park_Position := TRUE;
           li_StepCase := 0;
       END_IF;
       
       
       IF NOT gtyp_SSC.x_Start_Park_Position THEN
           li_StepCase := 0;
       END_IF;
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_SSC.x_Start_Park_Position AND NOT gtyp_SSC.x_Park_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
                    li_StepCase := 20;
               END_IF;
               
           20: 
               gtyp_SSC.Vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   li_StepCase := 30;
               END_IF;
               
           30: 
               IF gtyp_SSC.Vertical_Axis.x_Referenced THEN
                   gtyp_SSC.Vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 40;
               END_IF;
               
           40: 
               gtyp_SSC.Horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_SSC.Horizontal_Axis.x_Referenced THEN
                   li_StepCase := 50;
               END_IF;
               
           50: 
               IF gtyp_SSC.Horizontal_Axis.x_Referenced THEN
                   gtyp_SSC.Horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 60;
               END_IF;
             
           60: 
               gtyp_SSC.Horizontal_Axis.di_Target_Position := gtyp_SSC.di_Pos_Park_Horizontal;
               gtyp_SSC.Horizontal_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_SSC.Horizontal_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_Park_Horizontal + gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Horizontal_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_Park_Horizontal - gtyp_SSC.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_SSC.Horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 70;
               END_IF;
               
           70: 
               gtyp_SSC.Vertical_Axis.di_Target_Position := gtyp_SSC.di_Pos_Park_Vertical;
               gtyp_SSC.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_SSC.Vertical_Axis.di_Actual_Position <= (gtyp_SSC.di_Pos_Park_Vertical + gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_SSC.Vertical_Axis.di_Actual_Position >= (gtyp_SSC.di_Pos_Park_Vertical - gtyp_SSC.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_SSC.Vertical_Axis.x_Position_Reached THEN
                   gtyp_SSC.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80: 
               gtyp_SSC.x_Park_Position_Reached := TRUE;
               
               
               
           ELSE
               ;
       END_CASE;
       
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SLD_Set_Counter_Values
   VAR 
      lx_Init : Bool;
      lfb_R_Trig_Calib_activ : R_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       IF NOT gtyp_Setup.x_Counter_Value_Calibration THEN
           gtyp_Setup.i_Calib_CounterValue_Blue := gtyp_SLD.i_CounterValue_Blue;
           gtyp_Setup.i_Calib_CounterValue_Red := gtyp_SLD.i_CounterValue_Red;
           gtyp_Setup.i_Calib_CounterValue_White := gtyp_SLD.i_CounterValue_White;
       END_IF;
           
       
       IF gtyp_Setup.x_Set_CounterValues AND gtyp_Setup.x_Counter_Value_Calibration THEN
           gtyp_SLD.i_CounterValue_Blue := gtyp_Setup.i_Calib_CounterValue_Blue;
           gtyp_SLD.i_CounterValue_Red := gtyp_Setup.i_Calib_CounterValue_Red;
           gtyp_SLD.i_CounterValue_White := gtyp_Setup.i_Calib_CounterValue_White;
           gtyp_Setup.x_Set_CounterValues := FALSE;
       END_IF;
      
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_VGR_Set_Park_Position
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      lfb_TON_Wait : TON_TIME;
      lfb_R_Trig_Start_Park_Pos : R_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Start_Park_Pos(CLK := gtyp_Setup.x_Park_Position
                                  OR IX_Set_Park_Position);
       
       
       IF lfb_R_Trig_Start_Park_Pos.Q THEN
           gtyp_VGR.x_Start_Park_Position := TRUE;
           li_StepCase := 0;
       END_IF;
       
       
       IF NOT gtyp_VGR.x_Start_Park_Position THEN
           li_StepCase := 0;
       END_IF;
           
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF gtyp_VGR.x_Start_Park_Position AND NOT gtyp_VGR.x_Park_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   gtyp_VGR.rotate_Axis.x_Reference := FALSE;
                   gtyp_VGR.vertical_Axis.i_PWM := 800;
                   li_StepCase := 20;
               END_IF;
               
           20: 
               gtyp_VGR.vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.vertical_Axis.x_Referenced THEN
                   li_StepCase := 30;
               END_IF;
           
           30: 
               IF gtyp_VGR.vertical_Axis.x_Referenced THEN
                   gtyp_VGR.vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 40;
               END_IF;
                   
           40: 
               gtyp_VGR.horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   li_StepCase := 50;
               END_IF;
                   
           50: 
               IF gtyp_VGR.horizontal_Axis.x_Referenced THEN
                   gtyp_VGR.horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 60;
               END_IF;
                   
           60: 
               gtyp_VGR.rotate_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_VGR.rotate_Axis.x_Referenced THEN
                   li_StepCase := 70;
               END_IF;
                   
           70: 
               IF gtyp_VGR.rotate_Axis.x_Referenced THEN
                   gtyp_VGR.rotate_Axis.x_Reference := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80: 
               gtyp_VGR.rotate_Axis.di_Target_Position   := gtyp_VGR.di_Pos_Park_rotate;
               gtyp_VGR.rotate_Axis.x_Start_Positioning  := TRUE;
                   
               IF (gtyp_VGR.rotate_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Park_rotate + gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.rotate_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Park_rotate - gtyp_VGR.rotate_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.rotate_Axis.x_Position_Reached THEN
                   gtyp_VGR.rotate_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           90: 
               gtyp_VGR.horizontal_Axis.di_Target_Position := gtyp_VGR.di_Pos_Park_horizontal;
               gtyp_VGR.horizontal_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.horizontal_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Park_horizontal + gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.horizontal_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Park_horizontal - gtyp_VGR.horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.horizontal_Axis.x_Position_Reached THEN
                   gtyp_VGR.horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 100;
               END_IF;
               
           100: 
               gtyp_VGR.vertical_Axis.i_PWM := 500;
               gtyp_VGR.vertical_Axis.di_Target_Position := gtyp_VGR.di_Pos_Park_vertical;
               gtyp_VGR.vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_VGR.vertical_Axis.di_Actual_Position <= (gtyp_VGR.di_Pos_Park_vertical + gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_VGR.vertical_Axis.di_Actual_Position >= (gtyp_VGR.di_Pos_Park_vertical - gtyp_VGR.vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_VGR.vertical_Axis.x_Position_Reached THEN
                   gtyp_VGR.vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 110;
               END_IF;
               
           110: 
               gtyp_VGR.x_Park_Position_Reached := TRUE;
      
               
               
           ELSE
               ;
       END_CASE;
       
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_SSC_Axis_Horizontal
   VAR 
      lx_Init : Bool;
      lfb_Horizontal_Axis : FB_Axis;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_Horizontal_Axis(   ini_Axis                := 4,
                               indi_Increment          := gtyp_SSC.Horizontal_Axis.di_Increment,
                               inx_Ref_Switch          := IX_SSC_RefSwitchHorizontalAxis_I2,
                               inx_Referencing         := gtyp_SSC.Horizontal_Axis.x_Reference,
                               inx_Start_Positioning   := gtyp_SSC.Horizontal_Axis.x_Start_Positioning,
                               indi_Target_Position    := gtyp_SSC.Horizontal_Axis.di_Target_Position,
                               ini_PWM               := gtyp_SSC.Horizontal_Axis.i_PWM,
                               inouttyp_Config         := gtyp_SSC.Horizontal_Axis.Config,
                               inouttyp_Setup          := gtyp_SetupAxis);
          
       QX_SSC_M2_HorizontalAxisCounterclockwise_Q4      := lfb_Horizontal_Axis.outx_Motor_Neg;
       QX_SSC_M2_HorizontalAxisClockwise_Q3             := lfb_Horizontal_Axis.outx_Motor_Pos;
       QW_SSC_PWM_Horizontal_M2                         := lfb_Horizontal_Axis.outi_Motor_PWM;
       gtyp_SSC.Horizontal_Axis.di_Actual_Position   := lfb_Horizontal_Axis.outdi_Actual_Position;
       gtyp_SSC.Horizontal_Axis.x_Referenced         := lfb_Horizontal_Axis.outx_Referenced;
       gtyp_SSC.Horizontal_Axis.x_Position_Reached   := lfb_Horizontal_Axis.outx_Position_Reached;
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_HBW_Set_Park_Position
   VAR 
      lx_Init : Bool;
      lx_Start_TON_Wait : Bool;
      lt_TON_Wait : Time;
      li_StepCase : Int;
      lfb_TON_Wait : TON_TIME;
      lfb_R_Trig_Start_Park_Pos : R_TRIG;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Wait(IN := lx_Start_TON_Wait,
                     PT := lt_TON_Wait);
       
       lfb_R_Trig_Start_Park_Pos(CLK := gtyp_Setup.x_Park_Position
                                  OR IX_Set_Park_Position);
       
       
       IF lfb_R_Trig_Start_Park_Pos.Q THEN
           gtyp_HBW.x_Start_Park_Position := TRUE;
           li_StepCase := 0;
       END_IF;
       
       
       IF NOT gtyp_HBW.x_Start_Park_Position THEN
           li_StepCase := 0;
       END_IF;
       
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               li_StepCase := 10;
               
           10:  
               IF IX_HBW_SwitchCantileverFront_I5 OR NOT IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := TRUE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
               ELSIF NOT IX_HBW_SwitchCantileverFront_I5 AND IX_HBW_SwitchCantileverBack_I6 THEN
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 20;
               END_IF;
               
           20:  
               IF gtyp_HBW.x_Start_Park_Position AND NOT gtyp_HBW.x_Park_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
                   QX_HBW_M4_CantileverBackward_Q8 := FALSE;
                   QX_HBW_M4_CantileverForward_Q7 := FALSE;
                   li_StepCase := 30;
               END_IF;
               
           30: 
               gtyp_HBW.Vertical_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   li_StepCase := 40;
               END_IF;
               
           40: 
               IF gtyp_HBW.Vertical_Axis.x_Referenced THEN
                   gtyp_HBW.Vertical_Axis.x_Reference := FALSE;
                   li_StepCase := 50;
               END_IF;
               
           50: 
               gtyp_HBW.Horizontal_Axis.x_Reference := TRUE;
               
               IF NOT gtyp_HBW.Horizontal_Axis.x_Referenced THEN
                   li_StepCase := 60;
               END_IF;
               
           60: 
               IF gtyp_HBW.Horizontal_Axis.x_Referenced THEN
                   gtyp_HBW.Horizontal_Axis.x_Reference := FALSE;
                   li_StepCase := 70;
               END_IF;
               
           70: 
               gtyp_HBW.Horizontal_Axis.di_Target_Position := gtyp_HBW.di_Pos_Park_Horizontal;
               gtyp_HBW.Horizontal_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Horizontal_Axis.di_Actual_Position <= (gtyp_HBW.di_Pos_Park_Horizontal + gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Horizontal_Axis.di_Actual_Position >= (gtyp_HBW.di_Pos_Park_Horizontal - gtyp_HBW.Horizontal_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Horizontal_Axis.x_Position_Reached THEN
                   gtyp_HBW.Horizontal_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 80;
               END_IF;
               
           80: 
               gtyp_HBW.Vertical_Axis.di_Target_Position := gtyp_HBW.di_Pos_Park_Vertical;
               gtyp_HBW.Vertical_Axis.x_Start_Positioning := TRUE;
               
               IF (gtyp_HBW.Vertical_Axis.di_Actual_Position <= (gtyp_HBW.di_Pos_Park_Vertical + gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND (gtyp_HBW.Vertical_Axis.di_Actual_Position >= (gtyp_HBW.di_Pos_Park_Vertical - gtyp_HBW.Vertical_Axis.Config.di_Pos_Window))
                   AND gtyp_HBW.Vertical_Axis.x_Position_Reached THEN
                   gtyp_HBW.Vertical_Axis.x_Start_Positioning := FALSE;
                   li_StepCase := 90;
               END_IF;
               
           90: 
               gtyp_HBW.x_Park_Position_Reached := TRUE;
               
               
               
           ELSE
               ;
       END_CASE;
       
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_Acknowledge
   VAR 
      lx_Init : Bool;
      li_StepCase : Int;
      lldt_Ack_old : LDT;
      lfb_TON_Wait : TON_TIME;
      lx_Start_TON_Wait : Bool;
   END_VAR



   IF lx_Init THEN
       lfb_TON_Wait(IN:= lx_Start_TON_Wait,PT:= T#20s);
       
       CASE li_StepCase OF
               
           0:  
               lx_Start_TON_Wait := FALSE;
               
               
               IF (gtyp_Interface_Dashboard.Publish.ldt_AcknowledgeButton > lldt_Ack_old)
                   OR gtyp_Setup.x_AcknowledgeButton THEN
                   lldt_Ack_old    := gtyp_Interface_Dashboard.Publish.ldt_AcknowledgeButton;
                   li_StepCase    := 10;
               END_IF;
               
           10: 
               gtyp_HBW.x_Error := FALSE;
               gtyp_MPO.x_Error := FALSE;
               gtyp_SLD.x_Error := FALSE;
               li_StepCase := 20;
               
           20: 
               gtyp_Setup.x_AcknowledgeButton := FALSE;
               li_StepCase := 0;
       
       ELSE  
           ;
       END_CASE;
    
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PRG_NFC
   VAR 
      lx_Init : Bool;
      lx_Start : Bool;
      lx_Time_Wait : Bool;
      lx_Time_Error : Bool;
      li_StepCase : Int;
      ldt_MQTT : Date_And_Time;
      ldt_Delete_old : LDT;
      ldt_Read_old : LDT;
      li_Return_LDT : Int;
      lfb_TON_Error : TON_TIME;
      lfb_TON_Wait : TON_TIME;
   END_VAR



   IF lx_Init THEN
       
       
       lfb_TON_Error(IN:= lx_Time_Error,
                      PT:= T#30s);
       
       
       lfb_TON_Wait(IN := lx_Time_Wait,
                     PT := T#5s);
        
        
       CASE li_StepCase OF
               
           0:  
               lx_Time_Wait                := FALSE;
               gtyp_VGR.x_NFC_Completed := FALSE;
               
               
               IF gtyp_VGR.x_NFC_Start_First AND NOT gtyp_VGR.x_Workpiece_NiO THEN
                   gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_state := '';
                   gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_type := '';
                   
                   gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.s_cmd := '';
                   li_StepCase := 10;
                   
               ELSIF gtyp_VGR.x_NFC_Start AND NOT gtyp_VGR.x_Workpiece_NiO THEN
                   gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.s_cmd := '';
                   li_StepCase := 40;
                   
               ELSIF QX_SSC_LED_Green_Q5 AND NOT gtyp_VGR.x_Workpiece_NiO THEN
                   ldt_Read_old := gtyp_Interface_Dashboard.Publish.ActionButtonNFCModule.ldt_ts;
                   gtyp_VGR.x_NFC_Start_First := FALSE;
                   gtyp_VGR.x_NFC_Start := FALSE;
                   gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.s_cmd := '';
                   li_StepCase := 60;
               END_IF;
               
           10: 
               
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.s_cmd := 'delete';
               li_Return_LDT := RD_SYS_T(ldt_MQTT);
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.ldt_ts := DT_TO_LDT(ldt_MQTT);
               
               li_StepCase := 20;
               
           20: 
               lx_Time_Error := TRUE;
               IF (gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.ldt_ts > gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.ldt_ts)
                   AND (gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_type = 'NONE')
                   AND (gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_state <> '')
                   AND (gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_id <> '') THEN
                   gtyp_VGR.Workpiece.s_id := gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_id;
                   lx_Time_Error := FALSE;
                   li_StepCase := 30;
               END_IF;
               
               IF lfb_TON_Error.Q THEN
                   lx_Time_Error := FALSE;
                   gtyp_VGR.x_Workpiece_NiO := TRUE;
                   li_StepCase := 0;
               END_IF;
               
               
           30: 
               IF gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_id <> '' THEN
                   li_StepCase := 40;
               END_IF;
               
           40:  
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.History            := gtyp_VGR.History;
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.Workpiece.s_type   := gtyp_VGR.Workpiece.s_type;
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.Workpiece.s_state  := gtyp_VGR.Workpiece.s_state;
               
               li_Return_LDT := RD_SYS_T(ldt_MQTT);
               
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.s_cmd  := 'write';
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.ldt_ts := DT_TO_LDT(ldt_MQTT);
               
               li_StepCase := 50;
               
           50: 
               lx_Time_Error := TRUE;
               IF (gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.ldt_ts > gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.ldt_ts) THEN
                   lx_Time_Error := FALSE;
                   li_StepCase := 80;
               END_IF;
               
               IF lfb_TON_Error.Q THEN
                   lx_Time_Error := FALSE;
                   gtyp_VGR.x_Workpiece_NiO := TRUE;
                   li_StepCase := 0;
               END_IF;
               
           60: 
               
               li_Return_LDT := RD_SYS_T(ldt_MQTT);
               
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.s_cmd := 'read_uid';
               gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.ldt_ts := DT_TO_LDT(ldt_MQTT);
               lx_Time_Wait   := TRUE;
               li_StepCase    := 70;
               
           70: 
               IF NOT QX_SSC_LED_Green_Q5 OR lfb_TON_Wait.Q OR (gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.ldt_ts > gtyp_Interface_TXT_Controler.Publish.ActionButtonNFCModule.ldt_ts) THEN
                   IF LEN(gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_id) = 8 THEN
                       gtyp_Setup.x_Clean_Rack_HBW := TRUE;
                   END_IF;
                   lx_Time_Wait := FALSE;
                   gtyp_Interface_TXT_Controler.Subscribe.State_NFC_Device.Workpiece.s_id := '';
                   li_StepCase := 0;
               END_IF;
               
           80: 
               
               gtyp_VGR.x_NFC_Completed := TRUE;
               
               IF NOT gtyp_VGR.x_NFC_Start AND NOT gtyp_VGR.x_NFC_Start_First THEN
                   gtyp_VGR.x_NFC_Completed := FALSE;
                   lx_Start := FALSE;
                   li_StepCase := 0;
               END_IF;
               
               
               ELSE  
                   ;
       END_CASE;
    
   ELSE
       lx_Init := TRUE;
   END_IF;
END_FUNCTION_BLOCK

DATA_BLOCK PRG_VGR_Axis_vertical_DB

NON_RETAIN
PRG_VGR_Axis_vertical



END_DATA_BLOCK

DATA_BLOCK PRG_VGR_Ablauf_DB


NON_RETAIN
PRG_VGR_Ablauf



END_DATA_BLOCK

DATA_BLOCK PRG_VGR_Axis_horizontal_DB

NON_RETAIN
PRG_VGR_Axis_horizontal



END_DATA_BLOCK

DATA_BLOCK PRG_SSC_Axis_Vertical_DB


NON_RETAIN
PRG_SSC_Axis_Vertical



END_DATA_BLOCK

DATA_BLOCK PRG_SSC_Light_DB


NON_RETAIN
PRG_SSC_Light



END_DATA_BLOCK

DATA_BLOCK PRG_NFC_DB


NON_RETAIN
PRG_NFC



END_DATA_BLOCK

DATA_BLOCK PRG_SSC_Ablauf_DB


NON_RETAIN
PRG_SSC_Ablauf



END_DATA_BLOCK

DATA_BLOCK PRG_VGR_Axis_rotate_DB


NON_RETAIN
PRG_VGR_Axis_rotate



END_DATA_BLOCK

DATA_BLOCK RT_INFO_scl_OB30


NON_RETAIN
   VAR 
      mode : UInt; obNbr : OB_ANY; infoData : LTime; returnValue : Int;   
   END_VAR



   mode := 1;
   obNbr := 1;

END_DATA_BLOCK

DATA_BLOCK PRG_SSC_Axis_Horizontal_DB


NON_RETAIN
PRG_SSC_Axis_Horizontal



END_DATA_BLOCK

DATA_BLOCK PRG_SSC_Calibration_Color_DB


NON_RETAIN
PRG_SSC_Calibration_Color



END_DATA_BLOCK

DATA_BLOCK PRG_HBW_Axis_Vertical_DB


NON_RETAIN
PRG_HBW_Axis_Vertical



END_DATA_BLOCK

DATA_BLOCK PRG_SSC_Set_Positioning_DB


NON_RETAIN
PRG_SSC_Set_Positioning



END_DATA_BLOCK

DATA_BLOCK PRG_HBW_Set_Positioning_DB


NON_RETAIN
PRG_HBW_Set_Positioning



END_DATA_BLOCK

DATA_BLOCK PRG_VGR_Set_Positioning_DB


NON_RETAIN
PRG_VGR_Set_Positioning



END_DATA_BLOCK

DATA_BLOCK PRG_SLD_Calibration_Color_DB


NON_RETAIN
PRG_SLD_Calibration_Color



END_DATA_BLOCK

DATA_BLOCK PRG_SLD_Set_Counter_Values_DB


NON_RETAIN
PRG_SLD_Set_Counter_Values



END_DATA_BLOCK

DATA_BLOCK PRG_SSC_Set_Park_Position_DB
NON_RETAIN
PRG_SSC_Set_Park_Position



END_DATA_BLOCK

DATA_BLOCK PRG_VGR_Set_Park_Position_DB
NON_RETAIN
PRG_VGR_Set_Park_Position



END_DATA_BLOCK

DATA_BLOCK PRG_HBW_Set_Park_Position_DB
NON_RETAIN
PRG_HBW_Set_Park_Position



END_DATA_BLOCK

DATA_BLOCK RT_INFO_scl_OB1


NON_RETAIN
   VAR 
      mode : UInt; obNbr : OB_ANY; infoData : LTime; returnValue : Int;
   END_VAR



   mode := 1;
   obNbr := 1;

END_DATA_BLOCK

DATA_BLOCK PRG_Acknowledge_DB


NON_RETAIN
PRG_Acknowledge



END_DATA_BLOCK

DATA_BLOCK PRG_DSO_Status_DB


NON_RETAIN
PRG_DSO_Status



END_DATA_BLOCK

DATA_BLOCK PRG_DSI_Status_DB


NON_RETAIN
PRG_DSI_Status



END_DATA_BLOCK

DATA_BLOCK PRG_Order_DB


NON_RETAIN
PRG_Order



END_DATA_BLOCK

DATA_BLOCK PRG_SLD_Ablauf_DB


NON_RETAIN
PRG_SLD_Ablauf



END_DATA_BLOCK

DATA_BLOCK PRG_MPO_Ablauf_DB


NON_RETAIN
PRG_MPO_Ablauf



END_DATA_BLOCK

DATA_BLOCK PRG_MPO_Set_Park_Position_DB
NON_RETAIN
PRG_MPO_Set_Park_Position



END_DATA_BLOCK

DATA_BLOCK PRG_HBW_Axis_Horizontal_DB


NON_RETAIN
PRG_HBW_Axis_Horizontal



END_DATA_BLOCK

DATA_BLOCK PRG_HBW_Ablauf_DB


NON_RETAIN
PRG_HBW_Ablauf



END_DATA_BLOCK

PROGRAM Main


   
   RT_INFO_scl_OB30.mode := 1;
   RT_INFO_scl_OB30.obNbr := 30;
   RT_INFO_scl_OB30.returnValue := RT_INFO(MODE := RT_INFO_scl_OB30.mode,
                                             OB := RT_INFO_scl_OB30.obNbr,
                                             INFO := RT_INFO_scl_OB30.infoData);
   
   
   RT_INFO_scl_OB1.mode := 1;
   RT_INFO_scl_OB1.obNbr := 1;
   RT_INFO_scl_OB1.returnValue := RT_INFO(MODE := RT_INFO_scl_OB1.mode,
                                            OB := RT_INFO_scl_OB1.obNbr,
                                            INFO := RT_INFO_scl_OB1.infoData);
   
   
   PRG_SSC_Ablauf_DB();
   PRG_SSC_Set_Positioning_DB();
   PRG_SSC_Set_Park_Position_DB();
   PRG_SSC_Calibration_Color_DB();
   PRG_SSC_Axis_Vertical_DB();
   PRG_SSC_Axis_Horizontal_DB();
   PRG_SSC_Light_DB();
   
   
   PRG_VGR_Ablauf_DB();
   PRG_VGR_Set_Positioning_DB();
   PRG_VGR_Set_Park_Position_DB();
   PRG_VGR_Axis_horizontal_DB();
   PRG_VGR_Axis_vertical_DB();
   PRG_VGR_Axis_rotate_DB();
   PRG_NFC_DB();
   
   
   PRG_HBW_Ablauf_DB();
   PRG_HBW_Set_Positioning_DB();
   PRG_HBW_Set_Park_Position_DB();
   PRG_HBW_Axis_Vertical_DB();
   PRG_HBW_Axis_Horizontal_DB();
   
   
   PRG_MPO_Ablauf_DB();
   PRG_MPO_Set_Park_Position_DB();
   
   
   PRG_SLD_Ablauf_DB();
   PRG_SLD_Calibration_Color_DB();
   PRG_SLD_Set_Counter_Values_DB();
   
   
   PRG_DSI_Status_DB();
   PRG_DSO_Status_DB();
   
   
   PRG_Order_DB();
   PRG_Acknowledge_DB();
   
END_PROGRAM
